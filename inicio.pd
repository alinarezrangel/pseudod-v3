utilizar bepd/builtins
utilizar bepd/x/enum
utilizar bepd/utilidades/texto
utilizar bepd/x/puerto como Puerto
utilizar bepd/x/puerto/deArchivo como PDA
utilizar bepd/x/sistemaDeArchivos/archivo como Archivos
utilizar bepd/x/entorno como Entorno
utilizar tokenizador como Tokenizador
utilizar parser como Parser
utilizar compilador como Compilador
utilizar resoluciónDeNombres como RN
utilizar backends/lua como LuaBack
utilizar módulos como Módulos
utilizar _VERSIÓN (VERSIÓN, METADATOS_GIT)


[DOCUMENTA
@brief{Es el nombre (legible por humanos) de esta implementación.}
DOCUMENTA]
variable NOMBRE_IMPLEMENTACIÓN
fijar NOMBRE_IMPLEMENTACIÓN a {PseudoD (bootstrap)}

[DOCUMENTA
@brief{Es la ruta de la BEPD que se usará si no se especifíca otra.}
DOCUMENTA]
variable RUTA_BEPD_PREDETERMINADA
fijar RUTA_BEPD_PREDETERMINADA a {/opt/pseudod/bepd/bepd/}

variable MENSAJE_DE_AYUDA
fijar MENSAJE_DE_AYUDA a {PseudoD versión ~t
Uso:  pseudod OPCIONES... (<archivo> | -c <programa>) [-b <ruta>]
      pseudod OPCIONES... [-i]
      pseudod (-v | --version)
      pseudod (-h | --help | -a | --ayuda | -?)

Opciones:

 <archivo>                          : Ejecuta el archivo <archivo>.
 -c <programa>                      : Ejecuta <programa> en vez de <archivo>.
 -b <ruta>                          : Fija <ruta> a la ruta a la BEPD.
 -B <ruta>                          : Igual a `-b <ruta>`. Obsoleto, existe
                                      por compatibilidad.
 -X <experimento>                   : Activa el experimento <experimento>.
 -v | --version                     : Muestra el nombre del intérprete y
                                      la versión.
 --solo-version                     : Solamente muestra la versión del
                                      intérprete.
 -h | --help | -a | --ayuda | -?    : Muestra este mensaje de ayuda y termina.
 -i                                 : Inicia el REPL. Equivalente a llamar
                                      `pseudod` sin <archivo> ni `-c`.
 -o <archivo> | --salida <archivo>  : Escribe el programa compilado a
                                      <archivo>.
 --sin-mensajes                     : No escribe los mensajes del compilador.
 -l <ruta>                          : Ignorado, existe por compatibilidad.
 --guardar-db <archivo>             : Guarda la base de datos luego de
                                      compilar en <archivo>
 --cargar-db <archivo>              : Carga la base de datos <archivo> antes de
                                      compilar.
 --escribir-salida                  : Escribe la salida de compilación a la
                                      salida estándar.

Si la opción `-b` no es especificada, la ruta a la BEPD se extráe de:

  1. La variable de entorno `$RUTA_PSEUDOD`, o si no exíste:
  2. La variable de entorno `$RUTA_PSEUDOD_BEPD`, o si no exíste:
  3. El directorio `~t`.

El sistema de experimentos te permite probar características experimentales o
en etapa de prueba. Actualmente están implementados los siguientes
experimentos:

 -X v3x  : No hace nada.
 -X v3   : Alias de `-X v3x`.

Los siguientes parámetros pueden ser inspeccionados:

 -I ruta-bepd  : Escribe la ruta a la BEPD utilizada.
 -I rutas-bib  : Escribe las rutas a las bibliotecas. Una por línea.
}#formatear: VERSIÓN, RUTA_BEPD_PREDETERMINADA

[DOCUMENTA
@brief{Determina si se debe mostrar la versión en el CLI.}

Luego de parsear las opciones del CLI, una variable de este tipo determina la
acción a realizar con respecto a la versión de esta implementación.

@enum(
@defenum(VERSIÓN_Y_NOMBRE){Se debe mostrar la versión de PseudoD implementada
y el nombre de la implementación.}
@defenum(SOLO_VERSIÓN){Solo muestra la versión de PseudoD implementada.}
@defenum(NO){No muestres ni la versión ni el nombre.}
)
DOCUMENTA]
variable MostrarVersión
fijar MostrarVersión a Enum: {MostrarVersión}, {VERSIÓN_Y_NOMBRE}, {SOLO_VERSIÓN}, {NO}

[DOCUMENTA
@brief{Contexto de las opciones del CLI.}

A medida que se parsean las opciones del CLI, una instancia de esta clase se va
llenando de los datos que se extrajeron. Luego, dependiendo de sus atributos es
posible saber que acciones realizar.
DOCUMENTA]
clase ContextoDeCLI
    [DOCUMENTA
    @brief{Nombre del archivo a ejecutar o compilar.}

    Un @pd{Texto}, debe ser compilado o ejecutado después de ejecutar
    @pd{programaAEjecutar}. Si no fue especificado un archivo, tiene el
    valor de @pd{NULO}.
    DOCUMENTA]
    atributo archivoAEjecutar

    [DOCUMENTA
    @brief{Programa a ejecutar.}

    Un @pd{Texto} que debe ser evaluado (interpretado). Esto tiene que suceder
    antes de compilar o ejecutar @pd{archivoAEjecutar}. Si no fue especificado
    un texto a ejecutar tiene el valor de @pd{NULO}.
    DOCUMENTA]
    atributo programaAEjecutar

    [DOCUMENTA
    @brief{@pd{Boole} que indica si se debería mostrar la ayuda.}

    Si es @pd{VERDADERO} también se deberá terminar el programa luego de
    mostrar la ayuda (sin ejecutar, leer ni compilar nada).
    DOCUMENTA]
    atributo mostrarAyuda

    [DOCUMENTA
    @brief{Si se debe mostrar la versión.}

    Instancia de @pd{MostrarVersión} que indica que versión/nombre se debe
    mostrar. Tal como con @pd{mostrarAyuda}, si tiene cualquier valor excepto
    @pd{MostrarVersión#NO} entonces también se debe terminar el programa antes
    de leer, ejecutar o compilar cualquier cosa.
    DOCUMENTA]
    atributo mostrarVersión

    [DOCUMENTA
    @brief{Ruta a la BEPD.}

    Un @pd{Texto} que indica la ruta a la BEPD que se debería usar. Si no fue
    especificada en el CLI, toma el valor de @pd{NULO} (y se debería
    interpretar como si fuera @pd{RUTA_BEPD_PREDETERMINADA}).
    DOCUMENTA]
    atributo rutaDeLaBEPD

    [DOCUMENTA
    @brief{Indica si se debería iniciar el REPL.}

    Un @pd{Boole}: @pd{VERDADERO} indica que el REPL se debería iniciar,
    @pd{FALSO} que no. De iniciarse el REPL deberá hacerse después de compilar,
    ejecutar y cargar cualquier archivo o base de datos.
    DOCUMENTA]
    atributo interactivo

    [DOCUMENTA
    @brief{Archivo en el que se guardará el compilado.}

    @pd{Texto} o @pd{NULO} que indica a donde se guardará el resultado de
    compilar @pd{nombreDelArchivo}. Su valor no importa si
    @pd{nombreDelArchivo} es @pd{NULO}. Si es @pd{NULO} pero
    @pd{nombreDelArchivo} no lo es, el resultado de la compilación será escrito
    a la salida estándar.
    DOCUMENTA]
    atributo archivoDeSalida

    [DOCUMENTA
    @brief{Si se deben mostrar mesajes adicionales.}

    Véase @pd{ContextoDeCLI#mostrarMensaje}.
    DOCUMENTA]
    atributo mostrarMensajes

    [DOCUMENTA
    @brief{A donde se deberá guardar la base de datos de módulos.}

    Luego de compilar, si este atributo no es @pd{NULO}, la base de datos de
    módulos será serializada en el archivo especificado.
    DOCUMENTA]
    atributo guardaBaseDeDatos

    [DOCUMENTA
    @brief{Que bases de datos de módulos se deben cargar.}

    Un @pd{Arreglo} de @pd{Texto}s (posiblemente vacío): Antes de compilar o
    ejecutar cualquier cosa, cada archivo en este arreglo es deserializado como
    una base de datos de módulos y cada DB es cargada en orden (aunque este
    detalle no importa ya que el orden de carga de bases de datos es
    irrelevante).
    DOCUMENTA]
    atributo cargaBasesDeDatos

    [DOCUMENTA
    @brief{Si debería escribir el compilado a la salida estándar.}

    Si es @pd{VERDADERO}, el resultado de compilar el programa es escrito a la
    salida estándar (además de ser escrito a @pd{archivoDeSalida}).
    DOCUMENTA]
    atributo escribirCompilado

    [DOCUMENTA
    @brief{Experimentos activos.}

    Un arreglo de textos, cada uno indicando un experimento activo. Los
    experimentos reconocidos son:

    @itemlist(
    @item{@code{v3x}: No hace nada. En otras implementaciones esto activa el
    soporte de PseudoD v3. Esta implementación soporta PseudoD v3 sin opciones
    adicionales.}
    @item{@code{v3}: Alias de @code{v3x}.}
    )
    DOCUMENTA]
    atributo experimentos

    [DOCUMENTA
    @brief{Devuelve este contexto como un texto.}
    DOCUMENTA]
    metodo comoTexto

    [DOCUMENTA
    @brief{Muestra un mensaje.}

    Actúa como un sistema sencillo de @italic{logging}: Si @pd{mostrarMensajes}
    es @pd{VERDADERO}, @pd{texto} será escrito a la salida estándar. De otra
    forma está llamada al método será ignorada.

    Mensajes de información y depuración del compilador/intérprete deberían
    siempre utilizar este método en vez de @pd{Escribir} directamente, pero las
    advertencias y errores no. Esto es debido a que las advertencias y errores
    siempre deberían ser mostradas, irrelevantemente de si el usuario indico
    que no se mostraran mensajes adicionales.
    DOCUMENTA]
    metodo mostrarMensaje: texto
finclase

metodo ContextoDeCLI#inicializar
    fijar yo#archivoAEjecutar a NULO
    fijar yo#programaAEjecutar a NULO
    fijar yo#mostrarAyuda a FALSO
    fijar yo#mostrarVersión a MostrarVersión#NO
    fijar yo#rutaDeLaBEPD a NULO
    fijar yo#interactivo a FALSO
    fijar yo#archivoDeSalida a NULO
    fijar yo#mostrarMensajes a VERDADERO
    fijar yo#guardaBaseDeDatos a NULO
    fijar yo#cargaBasesDeDatos a Arreglo#vacio
    fijar yo#escribirCompilado a FALSO
    fijar yo#experimentos a Arreglo#vacio
finmetodo

metodo ContextoDeCLI#comoTexto
    devolver {(ContextoDeCLI con archivoAEjecutar a ~t, programaAEjecutar ~t, mostrarAyuda ~t, mostrarVersión ~t, rutaDeLaBEPD ~t, interactivo ~t, archivoDeSalida ~t, mostrarMensajes ~t, guardaBaseDeDatos ~t, cargaBasesDeDatos ~t, escribirCompilado ~t, experimentos ~t)}#formatear: yo#archivoAEjecutar, yo#programaAEjecutar, yo#mostrarAyuda, yo#mostrarVersión, yo#rutaDeLaBEPD, yo#interactivo, yo#archivoDeSalida, yo#mostrarMensajes, yo#guardaBaseDeDatos, yo#cargaBasesDeDatos, yo#escribirCompilado, yo#experimentos
finmetodo

metodo ContextoDeCLI#mostrarMensaje: texto
    si yo#mostrarMensajes
        Escribir: texto
    finsi
finmetodo

[DOCUMENTA
@brief{Convierte un texto del CLI a un nombre de archivo.}

Tiene en cuenta casos especiales como que @code{-} debería ser interpretado
como la entrada estándar.
DOCUMENTA]
funcion ObtenerArchivoDesdeCLI: argumentoDelCLI
    si argumentoDelCLI = {-}
        [ FIXME: Solo funciona en *NIX. ]
        devolver {/dev/stdin}
    sino
        devolver argumentoDelCLI
    finsi
finfuncion

[DOCUMENTA
@brief{Parsea una sola opción del CLI.}

@pd{arg} es la opción a parsear (un @pd{Texto}) mientras que @pd{resto} es el
(posiblemente vacío) arreglo de textos que son las opciones que quedan en el
CLI sin parsear.

Devuelve un número indicando la cantidad de opciones de @pd{resto} que deberían
ser ignoradas: por ejemplo, si @pd{texto} es @pd{Arreglo#crearCon: "A", "B",
"C"} y este procedimiento devuelve @pd{0}, entonces la siguiente opción es
@pd{"A"}, mientras que si devuelve @pd{1} la siguiente opción en ser parseada
deberá ser @pd{"B"}.

@pd{ctx} es el @pd{ContextoDeCLI} cuyos atributos serán llenados con los
valores extraídos de las opciones.
DOCUMENTA]
procedimiento ParsearOpción: ctx, arg, resto
    si Contiene: (Arreglo#crearCon: {-h}, {--help}, {-a}, {--ayuda}, {-?}), arg
        fijar ctx#mostrarAyuda a VERDADERO
        devolver 0
    finsi
    si Contiene: (Arreglo#crearCon: {-v}, {--version}), arg
        fijar ctx#mostrarVersión a MostrarVersión#VERSIÓN_Y_NOMBRE
        devolver 0
    finsi
    si arg = {--solo-version}
        fijar ctx#mostrarVersión a MostrarVersión#SOLO_VERSIÓN
        devolver 0
    finsi
    si arg = {-l}
        [ Especifica la ruta al NEA. El NEA ya no es utilizado en PseudoD v3 ]
        devolver 1
    finsi
    si (arg = {-b}) || (arg = {-B})
        necesitas resto#longitud > 0
        fijar ctx#rutaDeLaBEPD a ObtenerArchivoDesdeCLI: (resto#en: 0)
        devolver 1
    finsi
    si arg = {-i}
        fijar ctx#interactivo a VERDADERO
        devolver 0
    finsi
    si arg = {-c}
        necesitas EsNulo: ctx#programaAEjecutar
        necesitas resto#longitud > 0
        fijar ctx#programaAEjecutar a resto#en: 0
        devolver 1
    finsi
    si (arg = {-o}) || (arg = {--salida})
        necesitas EsNulo: ctx#archivoDeSalida
        necesitas resto#longitud > 0
        fijar ctx#archivoDeSalida a ObtenerArchivoDesdeCLI: (resto#en: 0)
        devolver 1
    finsi
    si arg = {-X}
        necesitas resto#longitud > 0
        ctx#experimentos#agregarAlFinal: (resto#en: 0)
        devolver 1
    finsi
    si arg = {--sin-mensajes}
        fijar ctx#mostrarMensajes a FALSO
        devolver 0
    finsi
    si arg = {--guardar-db}
        necesitas EsNulo: ctx#guardaBaseDeDatos
        necesitas resto#longitud > 0
        fijar ctx#guardaBaseDeDatos a ObtenerArchivoDesdeCLI: (resto#en: 0)
        devolver 1
    finsi
    si arg = {--cargar-db}
        necesitas resto#longitud > 0
        ctx#cargaBasesDeDatos#agregarAlFinal: (ObtenerArchivoDesdeCLI: (resto#en: 0))
        devolver 1
    finsi
    si arg = {--escribir-salida}
        fijar ctx#escribirCompilado a VERDADERO
        devolver 0
    finsi
    devolver NULO
finprocedimiento

[DOCUMENTA
@brief{Parsea las opciones posicionales.}

Algunas opciones del CLI no son especificadas por "switches" como
@code{--salida} o @code{-i}, sino que quedan luego de parsear todas las
opciones válidas. Este es el caso, por ejemplo, con el nombre del archivo a
ejecutar/compilar.

@params(
@defparam(ctx){@pd{ContextoDeCLI} a usar.}
@defparam(posicionales){Arreglo con los argumentos del CLI que quedan.}
)
DOCUMENTA]
procedimiento ParsearPosicionales: ctx, posicionales
    necesitas posicionales#longitud =< 1
    si posicionales#longitud = 1
        fijar ctx#archivoAEjecutar a ObtenerArchivoDesdeCLI: (posicionales#en: 0)
    finsi
finprocedimiento

[DOCUMENTA
@brief{Parsea el CLI.}

La sintáxis de las opciones aceptadas por el parser es:

@itemlist(
@item{Opciones cortas: un signo "menos" @code{-} seguido de una sola
letra.  Pueden o no aceptar argumentos adicionales. Actualmente no es posible
"encadenar" varias de estas opciones como en otros CLIs (por ejemplo,
@code{-ijk} en vez de @code{-i -j -k})}
@item{Opciones largas: dos signos "menos" @code|{--}| seguidos del nombre
completo de la opción (que nunca contiene @code{=}). Pueden tener 0 o más
argumentos. Actualmente no se puede utilizar @code{=} para separar la opción de
su valor, siempre tienen que ser argumentos separados.}
@item{Argumentos posicionales: argumentos que no son precedidos por ningúna
opción son tratados como posicionales.}
@item{Finalizador de opciones: @code{--} por sí mismo termina de parsear
opciones: todos los argumentos luego de @code{--} son tratados como
posicionales incluso si comienzan con @code{-}.}
@item{Archivos especiales: Cada vez que se espera un archivo @code{-} puede ser
usado para indicar que se debe utilizar la entrada estándar.}
)

@devuelve{Un @pd{ContextoDeCLI} con todos los atributos especificados en el CLI.}
DOCUMENTA]
procedimiento ParsearCLI: cli
    variables ctx, i, posicionales
    fijar ctx a ContextoDeCLI#crear
    fijar i a 0
    fijar posicionales a Arreglo#vacio
    mientras i < cli#longitud
        variables arg, consumidos
        fijar arg a cli#en: i
        si arg = {--}
            [ `--` termina las opciones: Luego de `--` todos los parámetros
              del cli son posicionales, incluso los que comienzan con `-`. ]
            fijar posicionales a Concatenar: posicionales, (PedazoDeArreglo: cli, (i + 1), -1)
            fijar i a cli#longitud  [ <== Termina el bucle ]
        sino
            fijar consumidos a ParsearOpción: ctx, arg, (PedazoDeArreglo: cli, (i + 1), -1)
            si EsNulo: consumidos
                necesitas (arg = {-}) || (no ((arg#en: 0) = {-}))
                posicionales#agregarAlFinal: arg
                fijar i a i + 1
            sino
                fijar i a i + 1 + consumidos
            finsi
        finsi
    finmientras
    ParsearPosicionales: ctx, posicionales
    devolver ctx
finprocedimiento

[DOCUMENTA
@brief{Convierte un nombre de archivo a una llave de módulo.}

Una ruta como @code{hola/mundo.pd} es transformada en una llave como
@pd{Módulos#LlaveDeMódulo#crear: ".", "hola/mundo", "pd"}. La ruta al módulo
siempre es @code{.}.
DOCUMENTA]
funcion LlaveDeMóduloDesdeArchivoDelCLI: archivo
    variables archivoSinExtensión, extensión, partes
    fijar partes a Partir: archivo, {.}
    fijar archivoSinExtensión a Unir: (PedazoDeArreglo: partes, 0, -2), {.}
    fijar extensión a ÚltimoElemento: partes
    devolver Módulos#LlaveDeMódulo#crear: {.}, archivoSinExtensión, extensión
finfuncion

[DOCUMENTA
@brief{Compila un programa.}

Con el contexto del CLI @pd{ctx}, compila @pd{programa} (que debe ser un
texto).

Debido a que este procedimiento puede evaluar al programa, proceso que puede
reiniciar el runtime, nada debería ejecutarse después de llamar a este
procedimiento.
DOCUMENTA]
procedimiento Compilar: ctx, programa
    ctx#mostrarMensaje: {-- Inicio}
    variables comp, db, conf, llave, módulo, compilado

    ctx#mostrarMensaje: {-- Inicializando la base de datos de módulos...}
    ctx#mostrarMensaje: {--- Soporta variables de entorno?}
    si Entorno#SoportaVariablesDeEntorno
        ctx#mostrarMensaje: {---- Si}
    sino
        ctx#mostrarMensaje: {---- No}
    finsi
    fijar conf a Módulos#ConfiguraciónGlobal#predeterminado: Entorno#SoportaVariablesDeEntorno
    fijar db a Módulos#BaseDeDatos#conConfiguración: conf
    ParaCadaElemento: ctx#cargaBasesDeDatos, procedimiento: nombreDelArchivo
        ctx#mostrarMensaje: ({Cargando ~t}#formatear: nombreDelArchivo)
        variable arch
        fijar arch a PDA#PuertoDeArchivoDeLectura#abrir: nombreDelArchivo
        db#cargarMódulos: arch
        arch#cerrar
    finprocedimiento

    ctx#mostrarMensaje: {-- Inicializando el compilador a Lua}
    fijar comp a LuaBack#CompiladorALua#crear: db

    ctx#mostrarMensaje: {-- Compilando el programa...}
    si no EsNulo: ctx#archivoAEjecutar
        fijar llave a LlaveDeMóduloDesdeArchivoDelCLI: ctx#archivoAEjecutar
    sino
        fijar llave a Módulos#LlaveDeMódulo#crear: {.}, {<stdin>}, {pd}
    finsi
    fijar módulo a comp#compilarTexto: llave, programa
    db#agregarMódulo: módulo

    ctx#mostrarMensaje: {-- Final...}
    fijar compilado a comp#compilarTodo: llave

    si no EsNulo: ctx#guardaBaseDeDatos
        ctx#mostrarMensaje: ({-- Guardando base de datos en ~t}#formatear: ctx#guardaBaseDeDatos)
        variable arch
        fijar arch a PDA#PuertoDeArchivoDeEscritura#abrir: ctx#guardaBaseDeDatos
        db#guardarMódulos: arch
        arch#cerrar
    finsi

    si no EsNulo: ctx#archivoDeSalida
        ctx#mostrarMensaje: ({-- Guardando en ~t}#formatear: ctx#archivoDeSalida)
        Archivos#EscribirArchivo: ctx#archivoDeSalida, (compilado#concatenar: {~%}#formatear)
    finsi

    si ctx#escribirCompilado
        Escribir: compilado
    finsi

    si (EsNulo: ctx#archivoDeSalida) && (no ctx#escribirCompilado)
        [ Tiene que llamarse en "tail-position" ]
        devolver EvaluarPrograma: compilado
    finsi
finprocedimiento

[DOCUMENTA
@brief{Compila un archivo.}

Llama a @pd{Compilar} con el contenido del archivo @pd{nombreDelArchivo} como
programa.
DOCUMENTA]
procedimiento CompilarArchivo: ctx, nombreDelArchivo
    Compilar: ctx, (Archivos#LeerArchivo: nombreDelArchivo)
finprocedimiento

[DOCUMENTA
@brief{Evalúa un programa en lua.}

@pd{compilado} debe ser un texto que es el programa en Lua a
evaluar. Básicamente le pasa @pd{compilado} a @code{load}. Nada del programa
actual debería ejecutarse después de esta función ya que reinicia el estado del
runtime.

Técnicamente hablando devuelve el valor devuelto por el chunk principal de Lua
ejecutado, pero de nuevo, como no se debería ejecutar nada después de este
procedimiento el valor devuelto no importa.
DOCUMENTA]
procedimiento EvaluarPrograma: compilado
     si __Impl = {Lua Bootstrap}
         devolver __Lua: {rt.resetandload}, compilado
     sino
         __FallarConMensaje: {No es posible evaluar código en la implementación en C++}
     finsi
finprocedimiento

[DOCUMENTA
@brief{Inicia el REPL.}

Actualmente no está implementado.
DOCUMENTA]
procedimiento IniciarREPL: ctx
    NoImplementado
finprocedimiento

[DOCUMENTA
@brief{Ejecuta el contexto del CLI.}

El punto principal del compilador, llama a @pd{Compilar}, @pd{CompilarArchivo}
o @pd{IniciarREPL} dependiendo de las opciones del CLI.
DOCUMENTA]
procedimiento Inicio: ctxcli
    si (EsNulo: ctxcli#archivoAEjecutar) && (EsNulo: ctxcli#programaAEjecutar)
        fijar ctxcli#interactivo a VERDADERO
    finsi

    si no EsNulo: ctxcli#archivoAEjecutar
        CompilarArchivo: ctxcli, ctxcli#archivoAEjecutar
        devolver NULO
    finsi
    si no EsNulo: ctxcli#programaAEjecutar
        Compilar: ctxcli, ctxcli#programaAEjecutar
        devolver NULO
    finsi
    si ctxcli#interactivo
        IniciarREPL: ctxcli
        devolver NULO
    finsi

    Escribir: ctxcli
finprocedimiento

variable ctxcli
fijar ctxcli a ParsearCLI: __Argv
si ctxcli#mostrarAyuda
    escribir MENSAJE_DE_AYUDA
sino
    si ctxcli#mostrarVersión = MostrarVersión#VERSIÓN_Y_NOMBRE
        Escribir: ({~t ~t}#formatear: NOMBRE_IMPLEMENTACIÓN, VERSIÓN)
    sino
        si ctxcli#mostrarVersión = MostrarVersión#SOLO_VERSIÓN
            Escribir: VERSIÓN
        sino
            Inicio: ctxcli
        finsi
    finsi
finsi
