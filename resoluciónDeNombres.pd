utilizar bepd/builtins

utilizar ámbito como Ámbito
utilizar ast como AST
utilizar caminaNodos como CN

[DOCUMENTA
@brief{Tipo de @pd{LLAVE_RESOLUCIÓN_DE_NOMBRES}.}
DOCUMENTA]
clase LlaveResoluciónDeNombres
    metodo comoTexto
finclase

metodo LlaveResoluciónDeNombres#comoTexto
    devolver {<LLAVE_RESOLUCIÓN_DE_NOMBRES>}
finmetodo

[DOCUMENTA
@brief{Llave para los metadados del pase de resolución de nombres.}

Todos los metadatos agregados a los nodos del AST por este pase utilizan esta
llave.
DOCUMENTA]
variable LLAVE_RESOLUCIÓN_DE_NOMBRES
fijar LLAVE_RESOLUCIÓN_DE_NOMBRES a LlaveResoluciónDeNombres#crear

[ Este contador global es utilizado por GenerarIdDeNombre para asegurarse de
  siempre devolver un nombre único. ]
variable GID_NUM
fijar GID_NUM a 0

[DOCUMENTA
@brief{Devuelve un número único.}

Devuelve un binding único que puede usarse en un ámbito o como nombre resuelto.
DOCUMENTA]
procedimiento GenerarIdDeNombre
    fijar GID_NUM a GID_NUM + 1
    devolver GID_NUM
finprocedimiento

[DOCUMENTA
@brief{Fija el nombre resuelto de un nodo.}

Fija el metadato @code{nombreResuelto} del nodo a @pd{id}.
DOCUMENTA]
procedimiento FijarNombreResuelto: nodo, id
    nodo#fijarMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {nombreResuelto}, id
finprocedimiento

[DOCUMENTA
@brief{Obtiene el nombre resuelto de un nodo.}

Obtiene y devuelve el valor del metadato @code{nombreResuelto} del nodo.
DOCUMENTA]
funcion NombreResueltoDe: id
    devolver id#obtenerMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {nombreResuelto}
finfuncion

[DOCUMENTA
@brief{Obtiene el nombre resuelto de la variable @pd{yo} de un método.}

Obtiene y devuelve el valor del metadato @code{nombreResueltoDeYo} del nodo.
DOCUMENTA]
funcion NombreResueltoDelYoImplícito: id
    devolver id#obtenerMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {nombreResueltoDeYo}
finfuncion

[ Esta clase es solo un "ayudante", no debería usarse fuera de este módulo y es
  un detalle de la implementación. Para ver la lista de metadatos que esta
  clase pone en los nodos, véase el procedimiento ResolverNombres.

  Los distíntos métodos "visitarXYZ" modifican los metadatos de los nodos y no
  devuelven nada. Esto es de forma que llamar "caminante#visitar: ast" resuelve
  todos los nombres del AST, asumiendo que "ast" es un NodoPrograma y
  "caminante" una instancia de "ResoluciónDeNombresCNImpl". ]
clase ResoluciónDeNombresCNImpl hereda CN#CaminaNodos
    metodo inicializar
    metodo crearSubámbito
    metodo resolverFunciónOMétodoAnónimo: nodo, esMétodo
    metodo resolverArgumentos: argumentos
    metodo resolverParámetros: parámetros

    metodo finalizar: nodo, llave
finclase

atributo ResoluciónDeNombresCNImpl#_nombres, [ Ámbito actual ]
         ResoluciónDeNombresCNImpl#_porResolver,
         [ <-- Procedimientos por llamar al terminar el ámbito ]
         ResoluciónDeNombresCNImpl#_resolverMóduloProc
         [ <-- Procedimiento para resolver módulos (`utilizar`) ]

[ Algunos detalles adicionales de #_porResolver:

  - Es un arreglo de procedimientos sin parámetros que serán llamados al final
    de cada ámbito. No es "heredado" cuando se crea un subámbito. ]

metodo ResoluciónDeNombresCNImpl#inicializar
    fijar yo#_nombres a Ámbito#Ámbito#vacío
    fijar yo#_porResolver a Arreglo#vacio

    [ Nota como este método no inicializa todos los atributos,
      _resolverMóduloProc debe ser fijado manualmente por cualquiera que creó
      la instancia de ResoluciónDeNombresCNImpl. ]
finmetodo

[DOCUMENTA
@brief{Crea un subámbito.}

El subámbito es otra instancia cuyo @code{#_nombres#ámbitoPadre} apunta al
@code{#_nombres} de este. Además el @code{#_resolverMóduloProc} del subámbito
tiene el valor correcto.
DOCUMENTA]
metodo ResoluciónDeNombresCNImpl#crearSubámbito
    variable sub
    fijar sub a ResoluciónDeNombresCNImpl#crear
    fijar sub#_nombres#ámbitoPadre a yo#_nombres
    fijar sub#_resolverMóduloProc a yo#_resolverMóduloProc
    devolver sub
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarPrograma: nodo
    ParaCadaElemento: nodo#instrucciones, procedimiento: instr
        yo#visitar: instr
    finprocedimiento
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarVariable: nodo
    ParaCadaElemento: nodo#nombres, procedimiento: var
        variable id
        fijar id a GenerarIdDeNombre
        yo#_nombres#agregar: var#nombre, id
        FijarNombreResuelto: var, id
    finprocedimiento
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarFijar: nodo
    yo#visitar: nodo#objetivo
    yo#visitar: nodo#valor
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarEscribir: nodo
    yo#visitar: nodo#valor
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarNl: nodo
    [ Nada que hacer. ]
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarClase: nodo
    procedimiento ResolverTodoEnLista: ls
        ParaCadaElemento: ls, procedimiento: nodo
            yo#visitar: nodo
        finprocedimiento
    finprocedimiento

    variable nomclsid
    fijar nomclsid a GenerarIdDeNombre
    yo#_nombres#agregar: nodo#nombre#nombre, nomclsid
    FijarNombreResuelto: nodo#nombre, nomclsid

    si no EsNulo: nodo#claseBase
        ResolverTodoEnLista: (Arreglo#crearCon: nodo#claseBase)
    finsi
    ResolverTodoEnLista: nodo#extiendeClases
    ResolverTodoEnLista: nodo#implementaClases

    ParaCadaElemento: nodo#declaraciones, procedimiento: declr
        yo#visitar: declr
    finprocedimiento
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarDeclaraciónDeAtributosEnClase: nodo
    [ Nada que hacer. ]
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarDeclaraciónDeMétodoEnClase: nodo
    [ En teoría podríamos marcar los parámetros de la declaración, pero ya que
    nunca habrán usos de estos no lo veo mucho sentido. Por esto, no le voy a
    agregar el atributo nombreResuelto a los parámetros. ]
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarImplementa: nodo
    FijarNombreResuelto: nodo#nombre, (yo#_nombres#obtenerBinding: nodo#nombre#nombre)

    ParaCadaElemento: nodo#definiciones, procedimiento: declr
        yo#visitar: declr
    finprocedimiento
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarDefineAtributosEnClase: nodo
    [ De nuevo, nada que hacer. ]
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarDefineMétodoEnClase: nodo
    variable rdn
    fijar rdn a yo#crearSubámbito

    rdn#resolverParámetros: nodo#parámetros

    yo#_porResolver#agregarAlFinal: procedimiento
        ParaCadaElemento: nodo#cuerpo, procedimiento: stmt
            rdn#visitar: stmt
        finprocedimiento

        rdn#finalizar: nodo, NULO
    finprocedimiento
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarFunción: nodo
    variable idfunc
    fijar idfunc a GenerarIdDeNombre
    FijarNombreResuelto: nodo#nombre, idfunc
    yo#_nombres#agregar: nodo#nombre#nombre, idfunc
    yo#_nombres#marcarComoAutoejecutable: nodo#nombre#nombre

    yo#resolverFunciónOMétodoAnónimo: nodo, FALSO
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarNecesitas: nodo
    yo#visitar: nodo#expresión
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarDevolver: nodo
    yo#visitar: nodo#expresión
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarSi: nodo
    variables siVerdadero, siFalso
    yo#visitar: nodo#condicional

    fijar siVerdadero a yo#crearSubámbito
    ParaCadaElemento: nodo#siVerdadero, procedimiento: nodo
        siVerdadero#visitar: nodo
    finprocedimiento
    siVerdadero#finalizar: nodo, {nombresDefinídosSiVerdadero}

    fijar siFalso a yo#crearSubámbito
    ParaCadaElemento: nodo#siFalso, procedimiento: nodo
        siFalso#visitar: nodo
    finprocedimiento
    siFalso#finalizar: nodo, {nombresDefinídosSiFalso}
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarMientras: nodo
    variables cuerpo
    yo#visitar: nodo#condicional

    fijar cuerpo a yo#crearSubámbito
    ParaCadaElemento: nodo#cuerpo, procedimiento: nodo
        cuerpo#visitar: nodo
    finprocedimiento
    cuerpo#finalizar: nodo, NULO
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarMétodo: nodo
    yo#visitar: nodo#deClase
    yo#resolverFunciónOMétodoAnónimo: nodo, VERDADERO
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarAtributos: nodo
    yo#visitar: nodo#deClase
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarUtilizar: nodo
    variables móduloImportado, instanciaDeMódulo
    si EsInstancia: nodo#módulo, AST#NodoIdentificador
        fijar móduloImportado a nodo#módulo#nombre
    sino
        fijar móduloImportado a nodo#módulo
    finsi
    fijar instanciaDeMódulo a yo#_resolverMóduloProc#\llamar\: móduloImportado

    si no EsNulo: nodo#espacioDeNombres
        variables espacioDeNombres, espacioDeNombresId
        fijar espacioDeNombres a nodo#espacioDeNombres#nombre
        si yo#_nombres#contiene: espacioDeNombres
            fijar espacioDeNombresId a yo#_nombres#obtenerBinding: espacioDeNombres
        sino
            fijar espacioDeNombresId a GenerarIdDeNombre
            yo#_nombres#agregar: espacioDeNombres, espacioDeNombresId
        finsi
        FijarNombreResuelto: nodo#espacioDeNombres, espacioDeNombresId
    finsi
    si no EsNulo: nodo#nombresEspecíficos
        ParaCadaElemento: nodo#nombresEspecíficos, procedimiento: importado
            variables nombreEnMódulo, nombreFinal
            si EsInstancia: importado, AST#NodoIdentificador
                fijar nombreEnMódulo a importado
                fijar nombreFinal a importado
            sino
                fijar nombreEnMódulo a importado#en: 0
                fijar nombreFinal a importado#en: 1
            finsi
            variable id
            fijar id a GenerarIdDeNombre
            yo#_nombres#agregar: nombreFinal#nombre, id
            yo#_nombres#marcarComoImportada: nombreFinal#nombre, instanciaDeMódulo#llave, nombreEnMódulo#nombre
            si instanciaDeMódulo#exporta#esAutoejecutable: nombreEnMódulo#nombre
                yo#_nombres#marcarComoAutoejecutable: nombreFinal#nombre
            finsi
            FijarNombreResuelto: nombreFinal, id
        finprocedimiento
    finsi
    si (EsNulo: nodo#espacioDeNombres) && (EsNulo: nodo#nombresEspecíficos)
        variable mapeoDeImportados
        fijar mapeoDeImportados a Diccionario#vacío
        instanciaDeMódulo#exporta#paraCadaBinding: procedimiento: nombre, _binding
            variable id
            fijar id a GenerarIdDeNombre
            yo#_nombres#agregar: nombre, id
            yo#_nombres#marcarComoImportada: nombre, instanciaDeMódulo#llave, nombre
            si instanciaDeMódulo#exporta#esAutoejecutable: nombre
                yo#_nombres#marcarComoAutoejecutable: nombre
            finsi
            mapeoDeImportados#fijarEn: nombre, id
        finprocedimiento
        nodo#fijarMetadato:
            LLAVE_RESOLUCIÓN_DE_NOMBRES,
            {nombresImportadosResueltos},
            mapeoDeImportados
    finsi
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarIdentificador: nodo
    FijarNombreResuelto: nodo, (yo#_nombres#obtenerBinding: nodo#nombre)
    variables esAutoejecutable, importadoDe, seLlamaba
    fijar esAutoejecutable a yo#_nombres#esAutoejecutable: nodo#nombre
    si yo#_nombres#fueImportada: nodo#nombre
        fijar importadoDe a yo#_nombres#importadaDe: nodo#nombre
        fijar seLlamaba a yo#_nombres#seLlamaba: nodo#nombre
    sino
        fijar importadoDe a NULO
        fijar seLlamaba a NULO
    finsi
    nodo#fijarMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {esAutoejecutable}, esAutoejecutable
    nodo#fijarMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {importadoDe}, importadoDe
    nodo#fijarMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {seLlamaba}, seLlamaba
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarNúmeroLiteral: nodo
    [ Nada que hacer... ]
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarTextoLiteral: nodo
    [ Nada que hacer... ]
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarLlamarProcedimiento: nodo
    yo#visitar: nodo#proc
    necesitas nodo#proc#obtenerMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {esAutoejecutable}
    yo#resolverArgumentos: nodo#argumentos
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarEnviarMensaje: nodo
    yo#visitar: nodo#objeto
    yo#resolverArgumentos: nodo#argumentos
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarOperador: nodo
    yo#visitar: nodo#lhs
    yo#visitar: nodo#rhs
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarNoLlamar: nodo
    yo#visitar: nodo#base
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarAutoejecutar: nodo
    yo#visitar: nodo#expr
    yo#resolverArgumentos: nodo#argumentos
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarFunciónAnónima: nodo
    yo#resolverFunciónOMétodoAnónimo: nodo, nodo#esMétodo
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarSonIguales: nodo
    yo#visitar: nodo#lhs
    yo#visitar: nodo#rhs
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarReferenciar: nodo
    yo#visitar: nodo#nombre
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarNo: nodo
    yo#visitar: nodo#expresión
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarClonar: nodo
    yo#visitar: nodo#expresiónAClonar
    ParaCadaElemento: nodo#campos, procedimiento: campo
        yo#visitar: (campo#en: 1)
    finprocedimiento
finmetodo

metodo ResoluciónDeNombresCNImpl#visitarVariadic: nodo
    Inalcanzable
finmetodo

[ Este método es siempre llamado al final de cada ámbito. "llave" es el nombre
  del metadato donde se guardará el ámbito ("nombresDefinídos" si es NULO). ]
metodo ResoluciónDeNombresCNImpl#finalizar: nodo, llave
    ParaCadaElemento: yo#_porResolver, procedimiento: callback
        %callback
    finprocedimiento

    si no EsNulo: nodo
        si EsNulo: llave
            fijar llave a {nombresDefinídos}
        finsi
        nodo#fijarMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, llave, yo#_nombres
    finsi
finmetodo

metodo ResoluciónDeNombresCNImpl#resolverFunciónOMétodoAnónimo: nodo, esMétodo
    variable rdn
    fijar rdn a yo#crearSubámbito

    rdn#resolverParámetros: nodo#parámetros

    si esMétodo
        variable id
        fijar id a GenerarIdDeNombre
        rdn#_nombres#agregar: {yo}, id
        FijarNombreResuelto: nodo, id
        nodo#fijarMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {nombreResueltoDeYo}, id
    finsi

    yo#_porResolver#agregarAlFinal: procedimiento
        ParaCadaElemento: nodo#cuerpo, procedimiento: stmt
            rdn#visitar: stmt
        finprocedimiento

        rdn#finalizar: nodo, {nombresDefinídos}
        variable cl
        fijar cl a clonar rdn con finclonar
        ParaCadaElemento: nodo#parámetros, procedimiento: param
            variable nombre
            si EsInstancia: param, AST#NodoIdentificador
                fijar nombre a param#nombre
            sino
                fijar nombre a param#interno#nombre
            finsi
            cl#_nombres#eliminarNombreYBinding: nombre
        finprocedimiento
        si esMétodo
            cl#_nombres#eliminarNombreYBinding: {yo}
        finsi
        cl#finalizar: nodo, {nombresDefinídosSinParámetros}
    finprocedimiento
finmetodo

metodo ResoluciónDeNombresCNImpl#resolverArgumentos: argumentos
    ParaCadaElemento: argumentos, procedimiento: arg
        si EsInstancia: arg, AST#NodoVariadic
            yo#visitar: arg#interno
        sino
            yo#visitar: arg
        finsi
    finprocedimiento
finmetodo

metodo ResoluciónDeNombresCNImpl#resolverParámetros: parámetros
    ParaCadaElemento: parámetros, procedimiento: param
        si EsInstancia: param, AST#NodoVariadic
            fijar param a param#interno
        finsi
        variable id
        fijar id a GenerarIdDeNombre
        yo#_nombres#agregar: param#nombre, id
        FijarNombreResuelto: param, id
    finprocedimiento
finmetodo

[DOCUMENTA
@brief{Resuelve} todos los nombres del AST.

Los nodos son anotados con metadatos de la siguiente forma:

@itemlist(
@item{@pd{AST#NodoIdentificador} es anotado con @code{nombreResuelto}, que
contiene el binding de esa variable. También son anotados con
@code{esAutoejecutable}, un boole que indica si la variable es o no
autoejecutable; @code{importadoDe} que contiene la llave del módulo del que fue
importado (o @pd{NULO}) y @code{seLlamaba}, un texto que es el nombre que la
variable tenía antes de ser importada (o @pd{NULO}).}

@item{Los nodos @pd{AST#NodoMientras}, @pd{AST#NodoFunción},
@pd{AST#NodoPrograma} @pd{AST#NodoMétodo} y @pd{AST#NodoFunciónAnónima} tienen
un metadato @code{nombresDefinídos} que contiene el espacio de nombres del
ámbito que representan.}

@item{El nodo @pd{AST#NodoSi} contiene dos metadatos,
@code{nombresDefinídosSiVerdadero} y @code{nombresDefinídosSiFalso}. Estos
contienen los ámbitos de cada rama del condicional.}

@item{@pd{AST#NodoFunción}, @pd{AST#NodoFunciónAnónima} y @pd{AST#NodoMétodo}
tienen un @code{nombresDefinídosSinParámetros} que contiene el mismo ámbito de
la función/procedimiento/método pero sin tomar en cuenta los parámetros.}

@item{Los @pd{AST#NodoUtilizar} que no tienen un espacio de nombres ni una
lista de nombres a importar tienen un metadato
@code{nombresImportadosResueltos} que contiene un @pd{Diccionario} que mapea el
nombre de todas las variables importadas a sus bindings.}
)

Algunas notas especiales son:

@itemlist(
@item{En @pd{AST#NodoLlamarProcedimiento} el procedimiento siendo llamado
tendrá siempre un metadato @code{esAutoejecutable}. Tienes que tener esto en
cuenta al compilar el nodo.}
@item{Los @pd{AST#NodoDeclaraciónDeMétodoEnClase} no son visitados por la
implementación ya que no son utilizados actualmente.}
)

@pd{resolverMódulo} es un procedimiento que se llamará con el nombre del módulo
a importar como un texto y espera una instancia de @pd{Módulo} como valor
devuelto. Es utilizado para resolver @pd{utilizar}.

@pd{inyectarNombres} es llamado al principio en el ámbito principal (de la
forma @pd{%inyectarNombres: ámbito}). Este procedimiento puede ser utilizado
para "inyectar" variables globales o builtins.

@pd{removerNombres} es llamado al final de la resolución con el ámbito
principal (tal como @pd{inyectarNombres}). Puede ser utilizado para eliminar
nombres que nunca deberían ser exportados (el backend de lua lo utiliza para no
exportar builtins, por ejemplo).

@devuelve{El ámbito principal del programa, el mismo que será asignado a
@pd{AST#NodoPrograma}.}

DOCUMENTA]
procedimiento ResolverNombres: ast, resolverMódulo, inyectarNombres, removerNombres
    variable cn
    fijar cn a ResoluciónDeNombresCNImpl#crear
    fijar cn#_resolverMóduloProc a resolverMódulo
    %inyectarNombres: cn#_nombres
    cn#visitar: ast
    cn#_porResolver#agregarAlFinal: procedimiento
        %removerNombres: cn#_nombres
    finprocedimiento
    cn#finalizar: ast, NULO
    devolver cn#_nombres
finprocedimiento

[DOCUMENTA
@brief{Obtiene el metadato @code{nombresDefinídos}.}

Generalmente contiene un ámbito con todos los nombres del ámbito de un nodo.
DOCUMENTA]
funcion ObtenerNombresDefinídos: nodo
    devolver nodo#obtenerMetadato: LLAVE_RESOLUCIÓN_DE_NOMBRES, {nombresDefinídos}
finfuncion
