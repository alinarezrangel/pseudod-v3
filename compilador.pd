utilizar bepd/builtins
utilizar bepd/x/puerto como Puerto

utilizar parser como Parser
utilizar resoluciónDeNombres como RN
utilizar módulos como Módulos

clase CompiladorBase
    atributo baseDeDatos

    metodo compilarPuerto: llaveDeMódulo, puerto
    metodo compilarTexto: llaveDeMódulo, texto

    metodo compilarAST: ast, ámbito

    metodo importarMódulo: nombreDelMódulo
    metodo inyectarNombresEnÁmbito: ámbito
    metodo removerNombresDeÁmbito: ámbito
finclase

metodo CompiladorBase#compilarAST: ast, ámbito
    MétodoAbstracto
finmetodo

metodo CompiladorBase#importarMódulo: nombreDelMódulo
    MétodoAbstracto
finmetodo

metodo CompiladorBase#inyectarNombresEnÁmbito: ámbito
    MétodoAbstracto
finmetodo

metodo CompiladorBase#removerNombresDeÁmbito: ámbito
    MétodoAbstracto
finmetodo

metodo CompiladorBase#compilarPuerto: llaveDeMódulo, puerto
    variables ast, ámbito, compilado
    Escribir: ({---- Parsear: ~t}#formatear: llaveDeMódulo)
    fijar ast a Parser#CrearAST: puerto
    Escribir: ({---- RN: ~t}#formatear: llaveDeMódulo)
    fijar ámbito a RN#ResolverNombres: ast, procedimiento: nombreDelMódulo
        devolver yo#importarMódulo: nombreDelMódulo
    finprocedimiento, procedimiento: ámbito
        yo#inyectarNombresEnÁmbito: ámbito
    finprocedimiento, procedimiento: ámbito
        yo#removerNombresDeÁmbito: ámbito
    finprocedimiento
    Escribir: ({---- Compilar: ~t}#formatear: llaveDeMódulo)
    fijar compilado a yo#compilarAST: ast, ámbito
    Escribir: ({---- Mod: ~t}#formatear: llaveDeMódulo)
    devolver clonar Módulos#Módulo#_crear con
        llave: llaveDeMódulo
        exporta: ámbito
        compilado: compilado
    finclonar
finmetodo

metodo CompiladorBase#compilarTexto: llaveDeMódulo, texto
    devolver yo#compilarPuerto: llaveDeMódulo, (Puerto#TextoComoPuerto: texto)
finmetodo
