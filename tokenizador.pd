utilizar bepd/builtins
utilizar bepd/utilidades/texto/ascii como ASCII
utilizar bepd/x/puerto como Puerto
utilizar bepd/x/puerto/conPosición como PuertoConPos

utilizar tokens como Tokens

clase Tokenizador
    metodo inicializar: puerto

    metodo tokenizarSiguiente
    metodo siguienteLexema
    metodo siguienteToken
finclase

atributo Tokenizador#puerto

metodo Tokenizador#inicializar: puerto
    fijar yo#puerto a puerto
finmetodo

funcion EsFinDePalabra: car
    devolver (Contiene: «{}():#.%[],"», car) || (Contiene: {«»}, car)
finfuncion

[ " ]

funcion EsEspacioEnBlanco: car
    devolver (car = { }) || (car = {~%}#formatear)
finfuncion

funcion EsOperador: car
    devolver (Contiene: {<>=+-*/!|^&~}, car)
finfuncion

funcion EsSímbolo: car
    devolver Contiene: {():#.%,&}, car
finfuncion

procedimiento LeerPalabra: acc, puerto
    variables car, palabra
    fijar palabra a acc
    fijar car a puerto#leerCarácter
    mientras no car = Puerto#EOF
        si EsEspacioEnBlanco: car
            puerto#desleerCarácter
            devolver palabra
        sino
            si EsFinDePalabra: car
                si palabra#longitud > 0
                    puerto#desleerCarácter
                    devolver palabra
                sino
                    devolver car
                finsi
            sino
                fijar palabra a palabra#concatenar: car
                fijar car a puerto#leerCarácter
            finsi
        finsi
    finmientras
    devolver palabra
finprocedimiento

procedimiento LeerLiteralNumérica: posIni, tx, puerto
    variables texto, posFin, area
    fijar texto a LeerPalabra: tx, puerto
    fijar posFin a puerto#posiciónActual
    fijar area a Tokens#AreaTextual#crear: posIni, posFin
    necesitas EsNúmeroEntero: texto
    devolver Tokens#TokenNumero#crear: area, texto, (ConvertirAEntero: texto)
finprocedimiento

procedimiento LeerIdentificador: posIni, tx, puerto
    variables texto, posFin, area
    fijar texto a LeerPalabra: tx, puerto
    fijar posFin a puerto#posiciónActual
    fijar area a Tokens#AreaTextual#crear: posIni, posFin

    si Contiene: Tokens#PALABRAS_CLAVE, texto
        devolver Tokens#TokenPalabraClave#crear: area, texto, texto
    finsi
    si Todos: (Mapear: texto, &EsOperador)
        devolver Tokens#TokenOperador#crear: area, texto
    finsi
    devolver Tokens#TokenIdentificador#crear: area, texto
finprocedimiento

procedimiento LeerLexema: puerto
    variables car, posIni
    fijar posIni a puerto#posiciónActual
    fijar car a puerto#leerCarácter
    si car = Puerto#EOF
        devolver Puerto#EOF
    finsi
    si car = {-}
        variables car2, posFin
        fijar posFin a puerto#posiciónActual
        fijar car2 a puerto#leerCarácter
        si EsEspacioEnBlanco: car2
            devolver Tokens#TokenOperador#crear: (Tokens#AreaTextual#crear: posIni, posFin), car
        sino
            fijar car a car#concatenar: car2
            si ASCII#EsDígitoDecimal: car2
                devolver LeerLiteralNumérica: posIni, car, puerto
            sino
                devolver LeerIdentificador: posIni, car, puerto
            finsi
        finsi
    finsi
    si ASCII#EsDígitoDecimal: car
        devolver LeerLiteralNumérica: posIni, car, puerto
    finsi
    si EsSímbolo: car
        variable posFin
        si car = {&}
            variable c
            fijar c a puerto#leerCarácter
            si c = {&}
                fijar posFin a puerto#posiciónActual
                devolver Tokens#TokenOperador#crear: (Tokens#AreaTextual#crear: posIni, posFin), {&&}
            sino
                puerto#desleerCarácter
            finsi
        finsi
        fijar posFin a puerto#posiciónActual
        devolver Tokens#TokenPalabraClave#crear: (Tokens#AreaTextual#crear: posIni, posFin), car, car
    finsi
    si car = {"} [ " ]
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, {"} [ " ]
        fijar posFin a puerto#posiciónActual
        devolver Tokens#TokenTexto#crear: (Tokens#AreaTextual#crear: posIni, posFin), texto
    finsi
    si car = (__ByteATexto: 194)
        fijar car a puerto#leerCarácter
        necesitas car = (__ByteATexto: 171)

        variables texto, posFin
        fijar texto a {}
        LlamarConEC: procedimiento: ec
            mientras VERDADERO
                fijar texto a texto#concatenar: (Puerto#LeerHasta: puerto, (__ByteATexto: 194))
                fijar car a puerto#leerCarácter
                si (car = (__ByteATexto: 187)) || (car = Puerto#EOF)
                    %ec: NULO
                finsi
                fijar texto a texto#concatenar: (__ByteATexto: 194)
                fijar texto a texto#concatenar: car
            finmientras
        finprocedimiento
        fijar posFin a puerto#posiciónActual
        devolver Tokens#TokenTexto#crear: (Tokens#AreaTextual#crear: posIni, posFin), texto
    finsi
    si car = {«}
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, {»}
        fijar posFin a puerto#posiciónActual
        devolver Tokens#TokenTexto#crear: (Tokens#AreaTextual#crear: posIni, posFin), texto
    finsi
    si car = «{»
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, «}»
        fijar posFin a puerto#posiciónActual
        devolver Tokens#TokenTexto#crear: (Tokens#AreaTextual#crear: posIni, posFin), texto
    finsi
    si car = {[} [ ]
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, {]}
        fijar posFin a puerto#posiciónActual
        devolver Tokens#TokenComentario#crear: (Tokens#AreaTextual#crear: posIni, posFin), texto
    finsi
    si car = {\}
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, {\}
        fijar posFin a puerto#posiciónActual
        devolver Tokens#TokenIdentificador#crear: (Tokens#AreaTextual#crear: posIni, posFin), texto
    finsi
    devolver LeerIdentificador: posIni, car, puerto
finprocedimiento

metodo Tokenizador#siguienteLexema
    variables lectura, posIni, posFin
    Puerto#SaltarEspacios: yo#puerto
    devolver LeerLexema: yo#puerto
finmetodo

metodo Tokenizador#siguienteToken
    variable lex
    fijar lex a yo#siguienteLexema
    si lex = Puerto#EOF
        devolver Puerto#EOF
    finsi
    mientras EsInstancia: lex, Tokens#TokenComentario
        fijar lex a yo#siguienteLexema
        si lex = Puerto#EOF
            devolver Puerto#EOF
        finsi
    finmientras
    devolver lex
finmetodo

metodo Tokenizador#tokenizarSiguiente
    devolver yo#siguienteToken
finmetodo

procedimiento MostrarTokenizadoDeTexto: txt
    variable tknz
    fijar tknz a
        Tokenizador#crear:
            (PuertoConPos#PuertoConPosiciónTextual#crear:
                (Puerto#TextoComoPuerto: txt))
    variable T
    fijar T a tknz#tokenizarSiguiente
    mientras no T = Puerto#EOF
        Escribir: T
        fijar T a tknz#tokenizarSiguiente
    finmientras
finprocedimiento
