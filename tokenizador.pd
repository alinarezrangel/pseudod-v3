utilizar bepd/builtins
utilizar bepd/utilidades/texto/ascii como ASCII
utilizar puerto como Puerto

clase PosiciónTextual
    atributos nombreDelArchivo, línea, columna

    metodo inicializar: nombreDelArchivo, línea, columna

    metodo comoTexto
finclase

metodo PosiciónTextual#inicializar: nombreDelArchivo, línea, columna
    fijar yo#nombreDelArchivo a nombreDelArchivo
    fijar yo#línea a línea
    fijar yo#columna a columna
finmetodo

metodo PosiciónTextual#comoTexto
    devolver {«~t:~t:~t»}#formatear: yo#nombreDelArchivo, yo#línea, yo#columna
finmetodo

clase AreaTextual
    atributos posiciónInicial, posiciónFinal

    metodo inicializar: posInicial, posFinal

    metodo comoTexto
finclase

metodo AreaTextual#inicializar: posiciónInicial, posiciónFinal
    fijar yo#posiciónInicial a posiciónInicial
    fijar yo#posiciónFinal a posiciónFinal
finmetodo

metodo AreaTextual#comoTexto
    devolver {(desde ~t hasta ~t)}#formatear: yo#posiciónInicial, yo#posiciónFinal
finmetodo

clase Token
    atributos areaDelToken, texto

    metodo inicializar: area, texto

    metodo comoTexto
finclase

metodo Token#inicializar: area, texto
    fijar yo#areaDelToken a area
    fijar yo#texto a texto
finmetodo

metodo Token#comoTexto
    devolver {(Token (~t) en ~t contiene [~t])}#formatear: (TipoDe: yo), yo#areaDelToken, yo#texto
finmetodo

clase TokenIdentificador hereda Token
finclase

clase TokenPalabraClave hereda Token
    atributo palabraClave

    metodo inicializar: area, texto, palabra
finclase

metodo TokenPalabraClave#inicializar: area, texto, palabra
    (Token#_crearConYo: yo)#inicializar: area, texto
    fijar yo#palabraClave a palabra
finmetodo

variable PALABRAS_CLAVE
fijar PALABRAS_CLAVE a
    (Arreglo#crearCon:
        {#}, {(}, {)}, {,}, {.}, {:}, {%}, {\}, {"}, {«}, {»}, «{», «}»,
        {[}, {]}, {&},
        {variable}, {variables}, {adquirir}, {instancia}, {fijar}, {a},
        {escribir}, {nl}, {leer}, {si}, {finsi}, {sino}, {mientras},
        {finmientras}, {funcion}, {finfuncion}, {procedimiento},
        {finprocedimiento}, {metodo}, {finmetodo}, {devolver}, {llamar},
        {finargs}, {con}, {de}, {y}, {e}, {clase}, {hereda}, {extiende},
        {implementa}, {finclase}, {atributo}, {atributos}, {estatico},
        {clonar}, {finclonar}, {son}, {sean}, {iguales}, {diferentes}, {y},
        {tanto}, {como}, {algun}, {o}, {necesitas}, {utilizar}, {no},
        {finimplementa}
    )

[ " ]

clase TokenNumero hereda Token
    atributo valor

    metodo inicializar: area, texto, valor
finclase

metodo TokenNumero#inicializar: area, texto, valor
    (Token#_crearConYo: yo)#inicializar: area, texto
    fijar yo#valor a valor
finmetodo

clase TokenOperador hereda Token
    metodo op
finclase

metodo TokenOperador#op
    devolver yo#texto
finmetodo

clase TokenTexto hereda Token
finclase

clase TokenComentario hereda Token
finclase

clase PuertoConPosiciónTextual hereda Puerto#Puerto
    metodo inicializar: puerto

    metodo leerCarácter
    metodo desleerCarácter
finclase

atributos
    PuertoConPosiciónTextual#posiciónActual,
    PuertoConPosiciónTextual#puerto,
    PuertoConPosiciónTextual#posiciónAnterior

metodo PuertoConPosiciónTextual#inicializar: puerto
    fijar yo#puerto a puerto
    fijar yo#posiciónActual a PosiciónTextual#crear: {}, 1, 0
    fijar yo#posiciónAnterior a clonar yo#posiciónActual con finclonar
finmetodo

metodo PuertoConPosiciónTextual#leerCarácter
    variables c, np
    fijar c a yo#puerto#leerCarácter
    fijar yo#posiciónAnterior a clonar yo#posiciónActual con finclonar
    fijar np a clonar yo#posiciónActual con finclonar
    si c = {~%}#formatear
        fijar np#línea a yo#posiciónActual#línea + 1
        fijar np#columna a 0
    sino
        fijar np#columna a yo#posiciónActual#columna + 1
    finsi
    fijar yo#posiciónActual a np
    devolver c
finmetodo

metodo PuertoConPosiciónTextual#desleerCarácter
    variable c
    fijar c a yo#puerto#desleerCarácter
    fijar yo#posiciónActual a clonar yo#posiciónAnterior con finclonar
    devolver c
finmetodo

clase Tokenizador
    metodo inicializar: puerto

    metodo tokenizarSiguiente
    metodo siguienteLexema
    metodo siguienteToken
finclase

atributo Tokenizador#puerto

metodo Tokenizador#inicializar: puerto
    fijar yo#puerto a puerto
finmetodo

funcion EsFinDePalabra: car
    devolver (Contiene: «{}():#.%[],"», car) || (Contiene: {«»}, car)
finfuncion

[ " ]

funcion EsEspacioEnBlanco: car
    devolver (car = { }) || (car = {~%}#formatear)
finfuncion

funcion EsOperador: car
    devolver (Contiene: {<>=+-*/!|^&~}, car)
finfuncion

funcion EsSímbolo: car
    devolver Contiene: {():#.%,}, car
finfuncion

procedimiento LeerPalabra: acc, puerto
    variables car, palabra
    fijar palabra a acc
    fijar car a puerto#leerCarácter
    mientras no car = Puerto#EOF
        si EsEspacioEnBlanco: car
            puerto#desleerCarácter
            devolver palabra
        sino
            si EsFinDePalabra: car
                si palabra#longitud > 0
                    puerto#desleerCarácter
                    devolver palabra
                sino
                    devolver car
                finsi
            sino
                fijar palabra a palabra#concatenar: car
                fijar car a puerto#leerCarácter
            finsi
        finsi
    finmientras
    devolver palabra
finprocedimiento

procedimiento LeerLiteralNumérica: posIni, tx, puerto
    variables texto, posFin, area
    fijar texto a LeerPalabra: tx, puerto
    fijar posFin a puerto#posiciónActual
    fijar area a AreaTextual#crear: posIni, posFin
    necesitas EsNúmeroEntero: texto
    devolver TokenNumero#crear: area, texto, (ConvertirAEntero: texto)
finprocedimiento

procedimiento LeerIdentificador: posIni, tx, puerto
    variables texto, posFin, area
    fijar texto a LeerPalabra: tx, puerto
    fijar posFin a puerto#posiciónActual
    fijar area a AreaTextual#crear: posIni, posFin

    si Contiene: PALABRAS_CLAVE, texto
        devolver TokenPalabraClave#crear: area, texto, texto
    finsi
    si Todos: (Mapear: texto, &EsOperador)
        devolver TokenOperador#crear: area, texto
    finsi
    devolver TokenIdentificador#crear: area, texto
finprocedimiento

procedimiento LeerLexema: puerto
    variables car, posIni
    fijar posIni a puerto#posiciónActual
    fijar car a puerto#leerCarácter
    si car = Puerto#EOF
        devolver Puerto#EOF
    finsi
    si (car = {-}) || (ASCII#EsDígitoDecimal: car)
        devolver LeerLiteralNumérica: posIni, car, puerto
    finsi
    si EsSímbolo: car
        variable posFin
        fijar posFin a puerto#posiciónActual
        devolver TokenPalabraClave#crear: (AreaTextual#crear: posIni, posFin), car, car
    finsi
    si car = {"} [ " ]
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, {"} [ " ]
        fijar posFin a puerto#posiciónActual
        devolver TokenTexto#crear: (AreaTextual#crear: posIni, posFin), texto
    finsi
    si car = {«}
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, {»}
        fijar posFin a puerto#posiciónActual
        devolver TokenTexto#crear: (AreaTextual#crear: posIni, posFin), texto
    finsi
    si car = «{»
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, «}»
        fijar posFin a puerto#posiciónActual
        devolver TokenTexto#crear: (AreaTextual#crear: posIni, posFin), texto
    finsi
    si car = {[} [ ]
        variables texto, posFin
        fijar texto a Puerto#LeerHasta: puerto, {]}
        fijar posFin a puerto#posiciónActual
        devolver TokenComentario#crear: (AreaTextual#crear: posIni, posFin), texto
    finsi
    devolver LeerIdentificador: posIni, car, puerto
finprocedimiento

metodo Tokenizador#siguienteLexema
    variables lectura, posIni, posFin
    Puerto#SaltarEspacios: yo#puerto
    devolver LeerLexema: yo#puerto
finmetodo

metodo Tokenizador#siguienteToken
    variable lex
    fijar lex a yo#siguienteLexema
    si lex = Puerto#EOF
        devolver Puerto#EOF
    finsi
    mientras EsInstancia: lex, TokenComentario
        fijar lex a yo#siguienteLexema
        si lex = Puerto#EOF
            devolver Puerto#EOF
        finsi
    finmientras
    devolver lex
finmetodo

metodo Tokenizador#tokenizarSiguiente
    devolver yo#siguienteToken
finmetodo

procedimiento MostrarTokenizadoDeTexto: txt
    variable tknz
    fijar tknz a
        Tokenizador#crear:
            (PuertoConPosiciónTextual#crear:
                (Puerto#TextoComoPuerto: txt))
    variable T
    fijar T a tknz#tokenizarSiguiente
    mientras no T = Puerto#EOF
        Escribir: T
        fijar T a tknz#tokenizarSiguiente
    finmientras
finprocedimiento
