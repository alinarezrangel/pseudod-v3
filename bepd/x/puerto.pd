utilizar bepd/builtins

[DOCUMENTA
@brief{Tipo de la constante @pd{EOF}.}
DOCUMENTA]
clase TipoEOF
    metodo comoTexto
finclase

metodo TipoEOF#comoTexto
    devolver {EOF}
finmetodo

[DOCUMENTA
@brief{Fin de un puerto.}
DOCUMENTA]
variable EOF
fijar EOF a TipoEOF#crear

[DOCUMENTA
@brief{Una lectura parcial.}

@code{leído} es el texto leído del puerto. @code{finPorEOF} es un @pd{Boole}
que es @pd{VERDADERO} si la lectura parcial terminó porque se encontró un
@pd{EOF} o @pd{FALSO} si se terminó por otro motivo.
DOCUMENTA]
clase LecturaParcial
    atributos leído, finPorEOF

    metodo comoTexto
finclase

metodo LecturaParcial#comoTexto
    devolver {(LecturaParcial con leído: [~t], finPorEOF: ~t)}#formatear: yo#leído, (yo#finPorEOF#escojer: {VERDADERO}, {FALSO})
finmetodo

[DOCUMENTA
@brief{Clase base para los puertos.}
DOCUMENTA]
clase Puerto
finclase

[DOCUMENTA
@brief{Puerto de lectura de un texto.}

Implementa la interfáz de un puerto de lectura sobre un texto. Todos los
puertos de lectura deben implementar los métodos de instancia que esta clase
define.
DOCUMENTA]
clase PuertoDeLectura hereda Puerto
    [DOCUMENTA
    @brief{Crea un @pd{PuertoDeLectura} que leerá desde @pd{texto}.}

    Para construir una instancia de esta clase, prefiere siempre utilizar
    @pd{TextoComoPuerto}.
    DOCUMENTA]
    metodo estatico desdeTexto: texto

    [DOCUMENTA
    @brief{Lee un carácter del puerto y lo devuelve.}

    Si el puerto ya llegó a su final (no hay nada más que leer) entonces
    devuelve @pd{EOF}.
    DOCUMENTA]
    metodo leerCarácter

    [DOCUMENTA
    @brief{Vuelve a poner un carácter en el buffer del puerto.}

    @code{desleerCarácter} vuelve a poner el último carácter leído por
    @code{leerCarácter} en el puerto, de forma que la siguiente llamada
    a @code{leerCarácter} lo vuelve a devolver.
    DOCUMENTA]
    metodo desleerCarácter
finclase

atributo PuertoDeLectura#texto, PuertoDeLectura#cursor

metodo estatico PuertoDeLectura#desdeTexto: texto
    devolver yo#crear: texto
finmetodo

metodo PuertoDeLectura#inicializar: texto
    fijar yo#texto a texto
    fijar yo#cursor a 0
finmetodo

metodo PuertoDeLectura#leerCarácter
    si yo#cursor >= yo#texto#longitud
        devolver EOF
    sino
        variable car
        fijar car a yo#texto#en: yo#cursor
        fijar yo#cursor a yo#cursor + 1
        devolver car
    finsi
finmetodo

metodo PuertoDeLectura#desleerCarácter
    variable car
    si yo#cursor >= yo#texto#longitud
        fijar car a EOF
    sino
        fijar car a yo#texto#en: yo#cursor
    finsi
    si yo#cursor > 0
        fijar yo#cursor a yo#cursor - 1
    finsi
    devolver car
finmetodo

[DOCUMENTA
@brief{Puerto de escritura de un texto.}

Implementa la interfáz de un puerto de escritura sobre un texto. Todos los
puertos de escritura deben implementar los métodos de instancia que esta clase
define.
DOCUMENTA]
clase PuertoDeEscritura hereda Puerto
    [DOCUMENTA
    @brief{Crea un @pd{PuertoDeEscritura}.}

    Para construir una instancia de esta clase, prefiere siempre utilizar
    @pd{PuertoParaTexto}.
    DOCUMENTA]
    metodo estatico paraTexto

    [DOCUMENTA
    @brief{Devuelve todo el texto escrito hasta ahora en el puerto.}

    Prefiere siempre la función @pd{TextoDePuertoDeEscritura} sobre este
    método.
    DOCUMENTA]
    metodo texto

    [DOCUMENTA
    @brief{Escribe @pd{txt} en el puerto.}
    DOCUMENTA]
    metodo escribirTexto: txt
finclase

atributo PuertoDeEscritura#texto

metodo estatico PuertoDeEscritura#paraTexto
    devolver clonar yo#crear con texto: {} finclonar
finmetodo

metodo PuertoDeEscritura#escribirTexto: txt
    fijar yo#texto a yo#texto#concatenar: txt
finmetodo

[DOCUMENTA
@brief{Determina si @pd{texto} tiene a @pd{final} como postfijo.}
DOCUMENTA]
funcion TerminaCon: texto, final
    variables tamTexto, tamFinal
    fijar tamTexto a texto#longitud
    fijar tamFinal a final#longitud
    si tamFinal > tamTexto
        devolver FALSO
    finsi
    variable parteFinal
    fijar parteFinal a texto#subTexto: (tamTexto - tamFinal), tamFinal
    devolver parteFinal = final
finfuncion

[DOCUMENTA
@brief{Lee del puerto de lectura @pd{puerto} hasta que se cumpla un predicado.}

Lee carácteres de @pd{puerto}, acumulandolos en un texto @code{acc}. En cada
parte (incluyendo al principio cuando el acumulador está vacío) se llama a
@pd{predicado} con @code{acc} para determinar si se debe continuar (en caso de
devolver @pd{VERDADERO}) o detenerse (en caso de devolver @pd{FALSO}). No
incluye el último carácter leído (de hecho, es desleído).

Devuelve dicho acumulador.

Puede parecer raro que el texto devuelto no incluya el último texto leído, pero
esta función fue hecha para leer hasta encontrar carácteres, no patrónes más
complejos. Por ejemplo:

@ejemplo|{
variable p
fijar p a TextoComoPuerto: {hola mundo. que tal}
necesitas (LeerMientras: p, funcion: texto
    devolver TerminaCon: texto, {.}
finfuncion) = {hola mundo}
}|
DOCUMENTA]
procedimiento LeerMientras: puerto, predicado
    variable buff
    fijar buff a {}
    mientras %predicado: buff
        variable car
        fijar car a puerto#leerCarácter
        si car = EOF
            variable lec
            fijar lec a LecturaParcial#crear
            fijar lec#leído a buff
            fijar lec#finPorEOF a VERDADERO
            devolver lec
        finsi
        variable nb
        fijar nb a buff#concatenar: car
        si no %predicado: nb
            puerto#desleerCarácter
            devolver buff
        sino
            fijar buff a nb
        finsi
    finmientras
    devolver buff
finprocedimiento

[DOCUMENTA
@brief{Determina si @pd{texto} termina con un espacio en blanco " " o un fín
de línea.}
DOCUMENTA]
funcion TerminaConEspacios: texto
    devolver (TerminaCon: texto, {~%}#formatear) || (TerminaCon: texto, { })
finfuncion

[DOCUMENTA
@brief{Lee todos los espacios en blanco de un puerto.}

Lee carácteres de @pd{puerto} hasta que se encuentre uno que no sea un espacio
en blanco (definído por @pd{TerminaConEspacios}). Esto básicamente avanza el
puerto de forma que la siguiente llamada a @pd{PuertoDeLectura#leerCarácter} no
devuelva un espacio en blanco.
DOCUMENTA]
procedimiento SaltarEspacios: puerto
    variable car
    fijar car a puerto#leerCarácter
    mientras VERDADERO
        si car = EOF
            devolver NULO
        finsi
        si no TerminaConEspacios: car
            puerto#desleerCarácter
            devolver NULO
        finsi
        fijar car a puerto#leerCarácter
    finmientras
    Inalcanzable
finprocedimiento

[DOCUMENTA
@brief{Lee una palabra de un puerto.}

Lee de @pd{puerto} una "palabra" como en C++: Una palabra es cualquier
secuencia de carácteres que no seán espacios en blanco. Esto incluye carácteres
Unicode que normalmente se considerarían espacios.

@devuelve{Un texto: la palabra leída.}
DOCUMENTA]
procedimiento LeerPalabra: puerto
    SaltarEspacios: puerto
    devolver LeerMientras: puerto, funcion: buffer
        devolver no TerminaConEspacios: buffer
    finfuncion
finprocedimiento

[DOCUMENTA
@brief{Lee de @pd{puerto} hasta que se encuentre el texto @pd{hasta}.}

Si se encuentra el fin del puerto después de haber leído algo, devuelve lo
leído. Si por el contrario se encuentra el fin del puerto antes de leer
cualquier cosa, devuelve @pd{EOF}.

@devuelve{El texto leído. No incluye @pd{hasta}.}
DOCUMENTA]
procedimiento LeerHasta: puerto, hasta
    variable res
    fijar res a {}
    mientras no TerminaCon: res, hasta
        variable car
        fijar car a puerto#leerCarácter
        si car = EOF
            si res = {}
                devolver EOF
            sino
                devolver res
            finsi
        finsi
        fijar res a res#concatenar: car
    finmientras
    devolver res#subTexto: 0, (res#longitud - hasta#longitud)
finprocedimiento

[DOCUMENTA
@brief{Devuelve un puerto de lectura que lee carácteres de @pd{texto}.}

Alias de @pd{PuertoDeLectura#desdeTexto}.
DOCUMENTA]
funcion TextoComoPuerto: texto
    devolver PuertoDeLectura#desdeTexto: texto
finfuncion

[DOCUMENTA
@brief{Devuelve un puerto de escritura acumula lo escrito como un texto.}

Alias de @pd{PuertoDeEscritura#paraTexto}.
DOCUMENTA]
funcion PuertoParaTexto
    devolver PuertoDeEscritura#paraTexto
finfuncion

[DOCUMENTA
@brief{Devuelve todo el texto escrito hasta ahora en el puerto.}

@pd{puertoDeEscritura} debe haber sido creado por @pd{PuertoParaTexto}.
DOCUMENTA]
funcion TextoDePuertoDeEscritura: puertoDeEscritura
    devolver puertoDeEscritura#texto
finfuncion

[ Puertos estándar:

  Los dos puertos estándares están implementados como instancias de una misma
  clase, pero esto es un detalle de la implementación. ]

clase PuertoEstándar
    metodo leerCarácter
    metodo desleerCarácter
    metodo escribirTexto: texto
finclase

metodo PuertoEstándar#leerCarácter
    devolver __LeerCaracter
finmetodo

metodo PuertoEstándar#desleerCarácter
    __FallarConMensaje: {No se puede #desleerCarácter en un puerto estándar}
finmetodo

metodo PuertoEstándar#escribirTexto: texto
    escribir texto
finmetodo

[DOCUMENTA
@brief{La entrada estándar del programa.}

Este es un puerto de lectura que lee carácteres desde la entrada estándar. El
método @code{#desleerCarácter} no está soportado (esto es un bug y será
corregido en futuras versiones).
DOCUMENTA]
variable EntradaEstándar
fijar EntradaEstándar a PuertoEstándar#_crear

[DOCUMENTA
@brief{La salida estándar del programa.}

Un puerto de escritura que escribe textos a la salida estándar del programa
(utilizando la palabra clave @code{escribir}).
DOCUMENTA]
variable SalidaEstándar
fijar SalidaEstándar a PuertoEstándar#_crear
