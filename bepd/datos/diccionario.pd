utilizar bepd/builtinsImpl
utilizar bepd/datos/diccionario/interfaz (IDiccionario)
utilizar bepd/datos/diccionario/alist (DiccionarioAlist)

[DOCUMENTA
@brief{Diccionario eficiente.}

Se recomienda que uses esta clase en vez de usar manualmente las demás
implementaciones de @pd{IDiccionario}.

Este diccionario utiliza @pd{DiccionarioAList} y @pd{DiccionarioHashMap} del
módulo @pd{bepd/datos/diccionario/hashmap} (solo disponible en Lua) para
proveer una implementación de la interfaz de @pd{IDiccionario} que es eficiente
y portable.

Para la documentación de los métodos, véase @pd{IDiccionario}.

Este diccionario puede poseer cualquier objeto comparable con @code{operador_=}
o @code{igualA} como llave, pero las llaves hasheables son más eficientes.

El orden de iteración de este diccionario @bold{no está determinado}. Es
posible para el diccionario iterar de forma aleatoria incluso dentro de la
ejecución de un mismo programa.

Si no se está compilando para Lua, @pd{Diccionario} utilizará automáticamente
@pd{DiccionarioAList}. Para cualquier futura optimización a los diccionarios,
@pd{Diccionario} siempre se mantendrá compilable a todas las plataformas
soportadas al mismo tiempo que implementa dichas optimizaciones.
DOCUMENTA]
clase Diccionario hereda IDiccionario
    metodo estatico vacío
    metodo estatico desdeArreglo: arr
    metodo estatico desdePares: ...valores
finclase

atributos Diccionario#_hash, Diccionario#_alist

metodo estatico Diccionario#_crearDesdeImpls: hash, alist
    si __Impl = {Lua Bootstrap}
        necesitas no EsNulo: hash
    finsi
    necesitas no EsNulo: alist
    variable inst
    fijar inst a yo#crear
    fijar inst#_hash a hash
    fijar inst#_alist a alist
    devolver inst
finmetodo

metodo estatico Diccionario#vacío
    si __Impl = {Lua Bootstrap}
        utilizar bepd/datos/diccionario/hashmap (DiccionarioHashMap, HashMap)
        devolver yo#_crearDesdeImpls: DiccionarioHashMap#vacío, DiccionarioAlist#vacío
    sino
        devolver yo#_crearDesdeImpls: NULO, DiccionarioAlist#vacío
    finsi
finmetodo

metodo estatico Diccionario#desdeArreglo: arr
    si __Impl = {Lua Bootstrap}
        utilizar bepd/datos/diccionario/hashmap (DiccionarioHashMap, HashMap)
        variables hasheables, otros
        fijar hasheables a Arreglo#vacío
        fijar otros a Arreglo#vacío
        ParaCadaElemento: arr, procedimiento: el
            si HashMap#puedeTenerDeLlave: (el#en: 0)
                hasheables#agregarAlFinal: el
            sino
                otros#agregarAlFinal: el
            finsi
        finprocedimiento
        devolver yo#_crearDesdeImpls:
            (DiccionarioHashMap#desdeArreglo: hasheables),
            (DiccionarioAlist#desdeArreglo: otros)
    sino
        devolver yo#_crearDesdeImpls: NULO, (DiccionarioAlist#desdeArreglo: arr)
    finsi
finmetodo

metodo estatico Diccionario#desdePares: ...valores
    necesitas EsPar: valores#longitud
    si __Impl = {Lua Bootstrap}
        utilizar bepd/datos/diccionario/hashmap (DiccionarioHashMap, HashMap)
        variables hasheables, otros, i
        fijar hasheables a Arreglo#vacío
        fijar otros a Arreglo#vacío
        fijar i a 0
        mientras i < valores#longitud
            variables ll, v
            fijar ll a valores#en: i
            fijar v a valores#en: (i + 1)
            si HashMap#puedeTenerDeLlave: ll
                hasheables#agregarAlFinal: (Arreglo#crearCon: ll, v)
            sino
                otros#agregarAlFinal: (Arreglo#crearCon: ll, v)
            finsi
            fijar i a i + 2
        finmientras
        devolver yo#_crearDesdeImpls:
            (DiccionarioHashMap#desdeArreglo: hasheables),
            (DiccionarioAlist#desdeArreglo: otros)
    sino
        devolver yo#_crearDesdeImpls: NULO, (DiccionarioAlist#desdePares: ...valores)
    finsi
finmetodo

metodo Diccionario#_estáEnHashMap: llave
    si __Impl = {Lua Bootstrap}
        utilizar bepd/datos/diccionario/hashmap (DiccionarioHashMap, HashMap)
        si HashMap#puedeTenerDeLlave: llave
            devolver yo#_hash#contiene: llave
        sino
            devolver FALSO
        finsi
    sino
        devolver FALSO
    finsi
finmetodo

metodo Diccionario#_dispatch: nombreMétodo, llave, ...argumentos
    si yo#_estáEnHashMap: llave
        devolver __EnviarMensaje: yo#_hash, nombreMétodo, (ArregloConFinal: llave, argumentos)
    sino
        devolver __EnviarMensaje: yo#_alist, nombreMétodo, (ArregloConFinal: llave, argumentos)
    finsi
finmetodo

metodo Diccionario#en: llave
    devolver yo#_dispatch: {en}, llave
finmetodo

metodo Diccionario#fijarEn: llave, nuevoValor
    devolver yo#_dispatch: {fijarEn}, llave, nuevoValor
finmetodo

metodo Diccionario#transformarPar: llave, proc
    devolver yo#_dispatch: {transformarPar}, llave, proc
finmetodo

metodo Diccionario#eliminar: llave
    devolver yo#_dispatch: {eliminar}, llave
finmetodo

metodo Diccionario#contiene: llave
    devolver yo#_dispatch: {contiene}, llave
finmetodo

metodo Diccionario#vaciar
    si __Impl = {Lua Bootstrap}
        yo#_hash#vaciar
    finsi
    yo#_alist#vaciar
finmetodo

metodo Diccionario#longitud
    si __Impl = {Lua Bootstrap}
        devolver yo#_hash#longitud + yo#_alist#longitud
    sino
        devolver yo#_alist#longitud
    finsi
finmetodo

metodo Diccionario#comoTexto
    variable res
    fijar res a {(Diccionario#desdePares: }
    si __Impl = {Lua Bootstrap}
        yo#_hash#paraCadaPar: procedimiento: ll, v
            fijar res a res#concatenar: ((ll#comoTexto#concatenar: ({, }#concatenar: v#comoTexto))#concatenar: {, })
        finprocedimiento
    finsi
    yo#_alist#paraCadaPar: procedimiento: ll, v
        fijar res a res#concatenar: ((ll#comoTexto#concatenar: ({, }#concatenar: v#comoTexto))#concatenar: {, })
    finprocedimiento
    devolver res#concatenar: {)}
finmetodo

metodo Diccionario#comoArreglo
    si __Impl = {Lua Bootstrap}
        devolver Concatenar: yo#_hash#comoArreglo + yo#_alist#comoArreglo
    sino
        devolver yo#_alist#comoArreglo
    finsi
finmetodo

metodo Diccionario#paraCadaPar: proc
    si __Impl = {Lua Bootstrap}
        yo#_hash#paraCadaPar: proc
        yo#_alist#paraCadaPar: proc
    sino
        devolver yo#_alist#paraCadaPar: proc
    finsi
finmetodo

metodo Diccionario#paraCadaLlave: proc
    si __Impl = {Lua Bootstrap}
        yo#_hash#paraCadaLlave: proc
        yo#_alist#paraCadaLlave: proc
    sino
        devolver yo#_alist#paraCadaLlave: proc
    finsi
finmetodo

metodo Diccionario#paraCadaValor: proc
    si __Impl = {Lua Bootstrap}
        yo#_hash#paraCadaValor: proc
        yo#_alist#paraCadaValor: proc
    sino
        devolver yo#_alist#paraCadaValor: proc
    finsi
finmetodo

metodo Diccionario#reducir: ini, proc
    si __Impl = {Lua Bootstrap}
        devolver yo#_alist#reducir: (yo#_hash#reducir: ini, proc), proc
    sino
        devolver yo#_alist#reducir: ini, proc
    finsi
finmetodo

metodo Diccionario#transformar: proc
    si __Impl = {Lua Bootstrap}
        utilizar bepd/datos/diccionario/hashmap (DiccionarioHashMap, HashMap)
        variables hasheables, otros
        fijar hasheables a Arreglo#vacio
        fijar otros a Arreglo#vacio
        yo#_hash#paraCadaPar: procedimiento: ll, v
            variable res
            fijar res a %proc: ll, v
            si HashMap#puedeTenerDeLlave: (res#en: 0)
                hasheables#agregarAlFinal: res
            sino
                otros#agregarAlFinal: res
            finsi
        finprocedimiento
        fijar yo#_hash a DiccionarioHashMap#desdeArreglo: hasheables
        fijar yo#_alist a DiccionarioAlist#desdeArreglo: otros
    sino
        devolver yo#_alist#transformar: proc
    finsi
finmetodo

metodo Diccionario#mapear: proc
    si __Impl = {Lua Bootstrap}
        variable clon
        fijar clon a yo#\clonar\
        clon#transformar: proc
        devolver clon
    sino
        devolver Diccionario#_crearDesdeImpls: NULO, (yo#_alist#mapear: proc)
    finsi
finmetodo


[DOCUMENTA
@brief{Itera sobre un @pd{Diccionario} con orden determinista.}

Como indica la documentación de @pd{DiccionarioHashMap}, el orden de iteración
de @pd{Diccionario} no está determinado. Con esté procedimiento (que emula a
@code{paraCadaPar}), el orden es de iteración es determinista.

@pd{dic} es el @pd{Diccionario} mientras que @pd{proc} es un procedimiento de
la misma forma que el esperado por @code{paraCadaPar}.
DOCUMENTA]
procedimiento ParaCadaParConOrden: dic, proc
    si __Impl = {Lua Bootstrap}
        dic#_hash#_tabla#paraCadaParConOrden: proc
        dic#_alist#paraCadaPar: proc
    sino
        dic#paraCadaPar: proc
    finsi
finprocedimiento
