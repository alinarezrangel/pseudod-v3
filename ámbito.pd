utilizar bepd/builtins

[DOCUMENTA
@brief{Los datos de una variable en un ámbito.}

Véase la documentación de @pd{Ámbito} para más información.
DOCUMENTA]
clase DatosDeVariable
    [DOCUMENTA
    @brief{El binding de una variable.}

    El binding es un identificador único que todas las variables tienen. Es el
    verdadero identificador de las variables.

    Es un entero.
    DOCUMENTA]
    atributo binding

    [DOCUMENTA
    @brief{Si la variable es autoejecutable.}

    Las variables autoejecutables son llamadas (con @code{#\llamar\}) cuando
    son referidas por su nombre.

    Es un boole.
    DOCUMENTA]
    atributo esAutoejecutable

    [DOCUMENTA
    @brief{La llave del módulo de donde se importó esta variable.}

    Es @pd{NULO} para variables que no fueron importadas.
    DOCUMENTA]
    atributo importadoDe

    [DOCUMENTA
    @brief{El nombre de esta variable en el módulo en el que se importó.}

    Es @pd{NULO} para variables que no fueron importadas. Es un texto.
    DOCUMENTA]
    atributo seLlamaba

    [DOCUMENTA
    @brief{Inicializa los datos con los valores dados.}
    DOCUMENTA]
    metodo inicializar: binding, esAutoejecutable, importadoDe, seLlamaba

    [DOCUMENTA
    @brief{Devuelve una representación textual simple de los datos.}
    DOCUMENTA]
    metodo comoTexto
finclase

metodo DatosDeVariable#inicializar: binding, esAutoejecutable, importadoDe, seLlamaba
    fijar yo#binding a binding
    fijar yo#esAutoejecutable a esAutoejecutable
    fijar yo#importadoDe a importadoDe
    fijar yo#seLlamaba a seLlamaba
finmetodo

metodo DatosDeVariable#comoTexto
    devolver {(DatosDeVariable#crear: ~t, ~t, ~t, ~t)}#formatear:
        yo#binding, yo#esAutoejecutable, yo#importadoDe, yo#seLlamaba
finmetodo

[DOCUMENTA
@brief{Ámbito léxico.}

Cada instancia de @pd{Ámbito} representa un ámbito léxico en el programa,
conteniendo las variables, sus bindings y si son autoejecutables.

Un detalle muy importante es que las variables y sus bindings son almacenadas
de manera separada. Esto es así para permitir "shadowing", es decir, en el
siguiente ejemplo:

@codeblock|{
variable Hola
funcion Foo
    devolver Hola
finfuncion
variable Hola
fijar Hola a 5
Escribir: Foo
}|

Debería escribir @code{NULO}, no @code{5}. Esto es porque a pesar de que ambas
variables tienen el mismo nombre, tienen bindings distíntos.

Nota: El ejemplo anterior no es PseudoD válido. El lenguaje especifica que el
shadowing no se puede realizar de esta manera. Actualmente la única manera de
hacer "shadowing" es con la instrucción @pd{utilizar}. Además, incluso si fuese
posible ocultar una variable anteriormente declarada de esta forma, un bug en
el backend de Lua también hace que las variables dentro de procedimientos
siempre se resuelvan a su última declaración, no a la que era visible cuando
fue declarada.
DOCUMENTA]
clase Ámbito
    [DOCUMENTA
    @brief{Crea y devuelve un ámbito vacío.}

    Este ámbito no contiene ningún nombre ni binding, tampoco tiene un ámbito
    padre.
    DOCUMENTA]
    metodo estatico vacío

    [DOCUMENTA
    @brief{Crea un ámbito desde un arreglo.}

    El arreglo debe tener un número par de elementos. Cada elemento en la
    posición @pd{i} del arreglo es el nombre de la variable a crear, mientras
    que el elemento justo después debe ser la instancia de @pd{DatosDeVariable}
    para la variable.

    Por ejemplo, el arreglo:

    @ejemplo|{
    Arreglo#crearCon:
        "Hola", (DatosDevariable#crear: 1, FALSO, NULO, NULO),
        "Mundo", (DatosDevariable#crear: 2, FALSO, NULO, NULO)
    }|

    Creará un ámbito con las variables @pd{"Hola"} y @pd{"Mundo"}.

    El ámbito creado no tiene ámbito padre.
    DOCUMENTA]
    metodo estatico desdeArreglo: lst

    [DOCUMENTA
    @brief{Crea un ámbito desde una secuencia de valores.}

    Equivalente a @pd{Ámbito#desdeArreglo: vals}.
    DOCUMENTA]
    metodo estatico conValores: ...vals

    [DOCUMENTA
    @brief{El ámbito padre de este.}

    Todos los ámbitos léxicos pueden tener un ámbito padre. Si este ámbito no
    tiene un ámbito padre entonces @pd{ámbitoPadre} es @pd{NULO}. Pero si tiene
    un ámbito padre, operaciones como obtener una variable o modificarla serán
    aplicadas al padre de manera recursiva.

    Por ejemplo, si este ámbito posee un ámbito padre y se trata de obtener el
    valor de la variable @code{Hola} pero este ámbito no contiene una variable
    @code{Hola}, entonces @code{Hola} será buscada en @pd{ámbitoPadre}, si
    @pd{ámbitoPadre} no lo contiene, entonces en su padre y así sucesivamente.
    DOCUMENTA]
    atributo ámbitoPadre

    [DOCUMENTA
    @brief{Inicializa el ámbito.}

    El ámbito no tiene un ámbito padre y está vacío.
    DOCUMENTA]
    metodo inicializar

    [DOCUMENTA
    @brief{Agrega un nombre al ámbito.}

    Agrega @pd{nombre} al ámbito. @pd{valor} será el binding de @pd{nombre}. La
    variable no es autoejecutable.
    DOCUMENTA]
    metodo agregar: nombre, valor

    [DOCUMENTA
    @brief{Marca una variable como autoejecutable.}

    Si este ámbito no contiene al nombre, prueba con su ámbito padre
    recursivamente.
    DOCUMENTA]
    metodo marcarComoAutoejecutable: nombre

    [DOCUMENTA
    @brief{Marca una variable como importada.}

    @pd{importadaDe} y @pd{seLlamaba} tienen el mismo significado que los
    campos del mismo nombre en @pd{DatosDeVariable} excepto que no pueden ser
    @pd{NULO}.
    DOCUMENTA]
    metodo marcarComoImportada: nombre, importadaDe, seLlamaba

    [DOCUMENTA
    @brief{Elimina una variable.}

    Quita @pd{nombre} y su @pd{DatosDeVariable} del ámbito. Su binding aún es
    guardado.
    DOCUMENTA]
    metodo eliminarNombre: nombre

    [DOCUMENTA
    @brief{Elimina una variable y su binding.}
    DOCUMENTA]
    metodo eliminarNombreYBinding: nombre

    [DOCUMENTA
    @brief{Obtiene el binding de una variable.}

    @pd{nombre} es el nombre de la variable que aún debe existír en el ámbito.

    Si este ámbito no contiene al nombre, prueba con su ámbito padre
    recursivamente.
    DOCUMENTA]
    metodo obtenerBinding: nombre

    [DOCUMENTA
    @brief{Determina si una variable es autoejecutable.}

    Si este ámbito no contiene al nombre, prueba con su ámbito padre
    recursivamente.
    DOCUMENTA]
    metodo esAutoejecutable: nombre

    [DOCUMENTA
    @brief{Determina si la variable @pd{nombre} fue importada de otro módulo.}
    DOCUMENTA]
    metodo fueImportada: nombre

    [DOCUMENTA
    @brief{La llave del módulo del cual la variable @pd{nombre} fue importada.}

    Si la variable @pd{nombre} no fue importada, devuelve @pd{NULO}.
    DOCUMENTA]
    metodo importadaDe: nombre

    [DOCUMENTA
    @brief{El nombre que tenía la variable @pd{nombre} antes de ser importada.}

    Cuando una variable es importada, su nombre puede cambiar. Este método
    devuelve su nombre antes de ser importada. Es @pd{NULO} si la variable no
    fue importada.
    DOCUMENTA]
    metodo seLlamaba: nombre

    [DOCUMENTA
    @brief{Determina si este ámbito contiene a una variable.}

    Si este ámbito no contiene al nombre, prueba con su ámbito padre
    recursivamente.
    DOCUMENTA]
    metodo contiene: nombre

    [DOCUMENTA
    @brief{Crea un subámbito.}

    Devuelve un ámbito vacío cuyo @pd{ámbitoPadre} es igual a este ámbito.
    DOCUMENTA]
    metodo crearSubámbito

    [DOCUMENTA
    @brief{Devuelve una representación simple del ámbito como texto.}
    DOCUMENTA]
    metodo comoTexto

    [DOCUMENTA
    @brief{Itera sobre cada binding del ámbito con un nombre.}

    Llama a @pd{proc} con dos argumentos: el nombre de una variable y el
    binding de dicha. Solo es llamado sobre variables que exísten en el ámbito
    (bindings sin variables asociadas no son tomados en cuenta).

    Tal como @pd{paraCadaVariable}, no itera sobre el @pd{ámbitoPadre}.
    DOCUMENTA]
    metodo paraCadaBinding: proc

    [DOCUMENTA
    @brief{Itera sobre cada variable.}

    @pd{proc} es llamado por cada variable del ámbito con dos argumentos: el
    nombre de la variable y el @pd{DatosDeVariable} de dicha.

    No itera sobre el @pd{ámbitoPadre}.
    DOCUMENTA]
    metodo paraCadaVariable: proc

    [DOCUMENTA
    @brief{Todos los bindings del ámbito.}

    Devuelve un arreglo con todos los bindings de este ámbito, incluyendo los
    de variables borradas y los bindings de @pd{ámbitoPadre}.
    DOCUMENTA]
    metodo todosLosBindings

    [DOCUMENTA
    @brief{Todos los bindings locales del ámbito.}

    Como @pd{todosLosBindings}, pero no incluye los bindings del
    @pd{ámbitoPadre}.
    DOCUMENTA]
    metodo todosLosBindingsLocales

    [DOCUMENTA
    @brief{Devuelve el número de bindings de este ámbito y todos sus
    subámbitos.}
    DOCUMENTA]
    metodo númeroDeBindings

    [DOCUMENTA
    @brief{Obtiene el ámbito donde se define el binding.}

    Ya que los bindings son únicos, este método siempre podrá devolver un
    valor. Si ninguno de este ámbito o sus ámbitos padres definen este binding,
    falla con un error.
    DOCUMENTA]
    metodo ámbitoDondeSeDefine: binding
finclase

atributos Ámbito#_mapeo, Ámbito#_todosLosBindings, Ámbito#_númeroDeBindings

[ #_númeroDeBindings es el número de bindings de este ámbito y sus
  subámbitos. Increméntalo con #_incrementarNumBindings. ]

metodo estatico Ámbito#vacío
    devolver yo#crear
finmetodo

metodo estatico Ámbito#desdeArreglo: lst
    variable inst
    fijar inst a yo#crear
    fijar inst#_mapeo a Diccionario#desdeArreglo: lst
    fijar inst#_númeroDeBindings a lst#longitud
    devolver inst
finmetodo

metodo estatico Ámbito#conValores: ...vals
    variable inst
    fijar inst a yo#crear
    fijar inst#_mapeo a __EnviarMensaje: Diccionario, {desdePares}, vals
    fijar inst#_númeroDeBindings a vals#longitud / 2
    devolver inst
finmetodo

metodo Ámbito#inicializar
    fijar yo#_mapeo a Diccionario#vacío
    fijar yo#_todosLosBindings a Arreglo#vacio
    fijar yo#_númeroDeBindings a 0
    fijar yo#ámbitoPadre a NULO
finmetodo

metodo Ámbito#_incrementarNumBindings
    fijar yo#_númeroDeBindings a yo#_númeroDeBindings + 1
    si no EsNulo: yo#ámbitoPadre
        yo#ámbitoPadre#_incrementarNumBindings
    finsi
finmetodo

metodo Ámbito#agregar: nombre, binding
    yo#_mapeo#fijarEn: nombre, (DatosDeVariable#crear: binding, FALSO, NULO, NULO)
    yo#_todosLosBindings#agregarAlFinal: binding
    yo#_incrementarNumBindings
finmetodo

metodo Ámbito#marcarComoAutoejecutable: nombre
    variable dv
    fijar dv a yo#_mapeo#en: nombre
    fijar dv#esAutoejecutable a VERDADERO
finmetodo

metodo Ámbito#marcarComoImportada: nombre, importadaDe, seLlamaba
    variable dv
    fijar dv a yo#_mapeo#en: nombre
    fijar dv#importadoDe a importadaDe
    fijar dv#seLlamaba a seLlamaba
finmetodo

metodo Ámbito#eliminarNombre: nombre
    yo#_mapeo#eliminar: nombre
finmetodo

metodo Ámbito#eliminarNombreYBinding: nombre
    variables idx, bindingDelNombre
    fijar bindingDelNombre a (yo#_mapeo#en: nombre)#binding
    yo#_mapeo#eliminar: nombre
    fijar idx a LlamarConEC: procedimiento: esc
        ParaCadaElementoConÍndice: yo#_todosLosBindings, procedimiento: binding, i
            si binding = bindingDelNombre
                %esc: i
            finsi
        finprocedimiento
        devolver NULO
    finprocedimiento
    necesitas no EsNulo: idx
    fijar yo#_todosLosBindings a EliminarElementoEnÍndice: yo#_todosLosBindings, idx
finmetodo

metodo Ámbito#_obtener: nombre
    si yo#_mapeo#contiene: nombre
        devolver yo#_mapeo#en: nombre
    sino
        si EsNulo: yo#ámbitoPadre
            __FallarConMensaje: ({El ámbito no contiene el nombre ~T}#formatear: nombre)
        sino
            devolver yo#ámbitoPadre#_obtener: nombre
        finsi
    finsi
finmetodo

metodo Ámbito#obtenerBinding: nombre
    devolver (yo#_obtener: nombre)#binding
finmetodo

metodo Ámbito#esAutoejecutable: nombre
    devolver (yo#_obtener: nombre)#esAutoejecutable
finmetodo

metodo Ámbito#fueImportada: nombre
    devolver no EsNulo: (yo#_obtener: nombre)#importadoDe
finmetodo

metodo Ámbito#importadaDe: nombre
    devolver (yo#_obtener: nombre)#importadoDe
finmetodo

metodo Ámbito#seLlamaba: nombre
    devolver (yo#_obtener: nombre)#seLlamaba
finmetodo

metodo Ámbito#contiene: nombre
    devolver yo#_mapeo#contiene: nombre
finmetodo

metodo Ámbito#crearSubámbito
    variable sub
    fijar sub a Ámbito#vacío
    fijar sub#ámbitoPadre a yo
    devolver sub
finmetodo

metodo Ámbito#comoTexto
    devolver {(Ámbito: valores = ~t, padre = ~t)}#formatear: yo#_mapeo, yo#ámbitoPadre
finmetodo

metodo Ámbito#paraCadaBinding: proc
    yo#paraCadaVariable: procedimiento: nombre, dv
        devolver %proc: nombre, dv#binding
    finprocedimiento
finmetodo

metodo Ámbito#paraCadaVariable: proc
    yo#_mapeo#paraCadaPar: proc
finmetodo

metodo Ámbito#todosLosBindingsLocales
    devolver yo#_todosLosBindings
finmetodo

metodo Ámbito#todosLosBindings
    variable todosLosBindingsPadre
    si no EsNulo: yo#ámbitoPadre
        fijar todosLosBindingsPadre a yo#ámbitoPadre#todosLosBindings
    sino
        fijar todosLosBindingsPadre a Arreglo#vacio
    finsi
    devolver Concatenar: yo#_todosLosBindings, todosLosBindingsPadre
finmetodo

metodo Ámbito#númeroDeBindings
    devolver yo#_númeroDeBindings
finmetodo

metodo Ámbito#ámbitoDondeSeDefine: binding
    si Contiene: yo#todosLosBindingsLocales, binding
        devolver yo
    sino
        si no EsNulo: yo#ámbitoPadre
            devolver yo#ámbitoPadre#ámbitoDondeSeDefine: binding
        sino
            __FallarConMensaje: ({El binding ~t no está definido}#formatear: binding)
        finsi
    finsi
finmetodo
